

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Lavie.Modules.Project.Repositories\App.config"
//     Connection String Name: "ApplicationServices"
//     Connection String:      "Data Source=.;Initial Catalog=FastOA;User Id=sa;password=**zapped**;;Pooling=True;Max Pool Size=200;Min Pool Size=5;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Data Center Edition
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Lavie.Modules.Project.Repositories
{
    using System.Linq;
    using Lavie.Modules.Admin.Models;
    using Lavie.Modules.Project.Models;

    #region Unit of work

    public interface ILavieDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<BankType> BankTypes { get; set; } // BankType
        System.Data.Entity.DbSet<Bulletin> Bulletins { get; set; } // Bulletin
        System.Data.Entity.DbSet<Education> Educations { get; set; } // Education
        System.Data.Entity.DbSet<ExitReason> ExitReasons { get; set; } // ExitReason
        System.Data.Entity.DbSet<Group> Groups { get; set; } // Group
        System.Data.Entity.DbSet<GroupPolicy> GroupPolicies { get; set; } // GroupPolicy
        System.Data.Entity.DbSet<InsuranceNature> InsuranceNatures { get; set; } // InsuranceNature
        System.Data.Entity.DbSet<JobNature> JobNatures { get; set; } // JobNature
        System.Data.Entity.DbSet<Log> Logs { get; set; } // Log
        System.Data.Entity.DbSet<MobileValidationCode> MobileValidationCodes { get; set; } // MobileValidationCode
        System.Data.Entity.DbSet<Permission> Permissions { get; set; } // Permission
        System.Data.Entity.DbSet<Policy> Policies { get; set; } // Policy
        System.Data.Entity.DbSet<ProtocolTime> ProtocolTimes { get; set; } // ProtocolTime
        System.Data.Entity.DbSet<ProtocolType> ProtocolTypes { get; set; } // ProtocolType
        System.Data.Entity.DbSet<RecruitChannel> RecruitChannels { get; set; } // RecruitChannel
        System.Data.Entity.DbSet<RiderJobType> RiderJobTypes { get; set; } // RiderJobType
        System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        System.Data.Entity.DbSet<Site> Sites { get; set; } // Site
        System.Data.Entity.DbSet<Staff> Staffs { get; set; } // Staff
        System.Data.Entity.DbSet<StaffLeave> StaffLeaves { get; set; } // StaffLeave
        System.Data.Entity.DbSet<StaffLeaveAuditFlow> StaffLeaveAuditFlows { get; set; } // StaffLeaveAuditFlow
        System.Data.Entity.DbSet<StaffLeaveType> StaffLeaveTypes { get; set; } // StaffLeaveType
        System.Data.Entity.DbSet<StaffPolicy> StaffPolicies { get; set; } // StaffPolicy
        System.Data.Entity.DbSet<StaffStatu> StaffStatus { get; set; } // StaffStatus
        System.Data.Entity.DbSet<StaffTurnover> StaffTurnovers { get; set; } // StaffTurnover
        System.Data.Entity.DbSet<StaffTurnoverFlow> StaffTurnoverFlows { get; set; } // StaffTurnoverFlow
        System.Data.Entity.DbSet<StaffTurnoverType> StaffTurnoverTypes { get; set; } // StaffTurnoverType
        System.Data.Entity.DbSet<StaffWork> StaffWorks { get; set; } // StaffWork
        System.Data.Entity.DbSet<Station> Stations { get; set; } // Station
        System.Data.Entity.DbSet<User> Users { get; set; } // User

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int sp_updatestaffwork(int? staffID, int? year, int? month, string dayField, int? count);
        // sp_updatestaffworkAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    public class LavieDbContext : System.Data.Entity.DbContext, ILavieDbContext
    {
        public System.Data.Entity.DbSet<BankType> BankTypes { get; set; } // BankType
        public System.Data.Entity.DbSet<Bulletin> Bulletins { get; set; } // Bulletin
        public System.Data.Entity.DbSet<Education> Educations { get; set; } // Education
        public System.Data.Entity.DbSet<ExitReason> ExitReasons { get; set; } // ExitReason
        public System.Data.Entity.DbSet<Group> Groups { get; set; } // Group
        public System.Data.Entity.DbSet<GroupPolicy> GroupPolicies { get; set; } // GroupPolicy
        public System.Data.Entity.DbSet<InsuranceNature> InsuranceNatures { get; set; } // InsuranceNature
        public System.Data.Entity.DbSet<JobNature> JobNatures { get; set; } // JobNature
        public System.Data.Entity.DbSet<Log> Logs { get; set; } // Log
        public System.Data.Entity.DbSet<MobileValidationCode> MobileValidationCodes { get; set; } // MobileValidationCode
        public System.Data.Entity.DbSet<Permission> Permissions { get; set; } // Permission
        public System.Data.Entity.DbSet<Policy> Policies { get; set; } // Policy
        public System.Data.Entity.DbSet<ProtocolTime> ProtocolTimes { get; set; } // ProtocolTime
        public System.Data.Entity.DbSet<ProtocolType> ProtocolTypes { get; set; } // ProtocolType
        public System.Data.Entity.DbSet<RecruitChannel> RecruitChannels { get; set; } // RecruitChannel
        public System.Data.Entity.DbSet<RiderJobType> RiderJobTypes { get; set; } // RiderJobType
        public System.Data.Entity.DbSet<Role> Roles { get; set; } // Role
        public System.Data.Entity.DbSet<Site> Sites { get; set; } // Site
        public System.Data.Entity.DbSet<Staff> Staffs { get; set; } // Staff
        public System.Data.Entity.DbSet<StaffLeave> StaffLeaves { get; set; } // StaffLeave
        public System.Data.Entity.DbSet<StaffLeaveAuditFlow> StaffLeaveAuditFlows { get; set; } // StaffLeaveAuditFlow
        public System.Data.Entity.DbSet<StaffLeaveType> StaffLeaveTypes { get; set; } // StaffLeaveType
        public System.Data.Entity.DbSet<StaffPolicy> StaffPolicies { get; set; } // StaffPolicy
        public System.Data.Entity.DbSet<StaffStatu> StaffStatus { get; set; } // StaffStatus
        public System.Data.Entity.DbSet<StaffTurnover> StaffTurnovers { get; set; } // StaffTurnover
        public System.Data.Entity.DbSet<StaffTurnoverFlow> StaffTurnoverFlows { get; set; } // StaffTurnoverFlow
        public System.Data.Entity.DbSet<StaffTurnoverType> StaffTurnoverTypes { get; set; } // StaffTurnoverType
        public System.Data.Entity.DbSet<StaffWork> StaffWorks { get; set; } // StaffWork
        public System.Data.Entity.DbSet<Station> Stations { get; set; } // Station
        public System.Data.Entity.DbSet<User> Users { get; set; } // User

        static LavieDbContext()
        {
            System.Data.Entity.Database.SetInitializer<LavieDbContext>(null);
        }

        public LavieDbContext()
            : base("Name=ApplicationServices")
        {
        }

        public LavieDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public LavieDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public LavieDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public LavieDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BankTypeConfiguration());
            modelBuilder.Configurations.Add(new BulletinConfiguration());
            modelBuilder.Configurations.Add(new EducationConfiguration());
            modelBuilder.Configurations.Add(new ExitReasonConfiguration());
            modelBuilder.Configurations.Add(new GroupConfiguration());
            modelBuilder.Configurations.Add(new GroupPolicyConfiguration());
            modelBuilder.Configurations.Add(new InsuranceNatureConfiguration());
            modelBuilder.Configurations.Add(new JobNatureConfiguration());
            modelBuilder.Configurations.Add(new LogConfiguration());
            modelBuilder.Configurations.Add(new MobileValidationCodeConfiguration());
            modelBuilder.Configurations.Add(new PermissionConfiguration());
            modelBuilder.Configurations.Add(new PolicyConfiguration());
            modelBuilder.Configurations.Add(new ProtocolTimeConfiguration());
            modelBuilder.Configurations.Add(new ProtocolTypeConfiguration());
            modelBuilder.Configurations.Add(new RecruitChannelConfiguration());
            modelBuilder.Configurations.Add(new RiderJobTypeConfiguration());
            modelBuilder.Configurations.Add(new RoleConfiguration());
            modelBuilder.Configurations.Add(new SiteConfiguration());
            modelBuilder.Configurations.Add(new StaffConfiguration());
            modelBuilder.Configurations.Add(new StaffLeaveConfiguration());
            modelBuilder.Configurations.Add(new StaffLeaveAuditFlowConfiguration());
            modelBuilder.Configurations.Add(new StaffLeaveTypeConfiguration());
            modelBuilder.Configurations.Add(new StaffPolicyConfiguration());
            modelBuilder.Configurations.Add(new StaffStatuConfiguration());
            modelBuilder.Configurations.Add(new StaffTurnoverConfiguration());
            modelBuilder.Configurations.Add(new StaffTurnoverFlowConfiguration());
            modelBuilder.Configurations.Add(new StaffTurnoverTypeConfiguration());
            modelBuilder.Configurations.Add(new StaffWorkConfiguration());
            modelBuilder.Configurations.Add(new StationConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BankTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new BulletinConfiguration(schema));
            modelBuilder.Configurations.Add(new EducationConfiguration(schema));
            modelBuilder.Configurations.Add(new ExitReasonConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupConfiguration(schema));
            modelBuilder.Configurations.Add(new GroupPolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new InsuranceNatureConfiguration(schema));
            modelBuilder.Configurations.Add(new JobNatureConfiguration(schema));
            modelBuilder.Configurations.Add(new LogConfiguration(schema));
            modelBuilder.Configurations.Add(new MobileValidationCodeConfiguration(schema));
            modelBuilder.Configurations.Add(new PermissionConfiguration(schema));
            modelBuilder.Configurations.Add(new PolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new ProtocolTimeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProtocolTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RecruitChannelConfiguration(schema));
            modelBuilder.Configurations.Add(new RiderJobTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLeaveConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLeaveAuditFlowConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffLeaveTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffPolicyConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffStatuConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffTurnoverConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffTurnoverFlowConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffTurnoverTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new StaffWorkConfiguration(schema));
            modelBuilder.Configurations.Add(new StationConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int sp_updatestaffwork(int? staffID, int? year, int? month, string dayField, int? count)
        {
            var staffIDParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@staffID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = staffID.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!staffID.HasValue)
                staffIDParam.Value = System.DBNull.Value;

            var yearParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@year", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = year.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!year.HasValue)
                yearParam.Value = System.DBNull.Value;

            var monthParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@month", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = month.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!month.HasValue)
                monthParam.Value = System.DBNull.Value;

            var dayFieldParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@dayField", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = dayField, Size = 7 };
            if (dayFieldParam.Value == null)
                dayFieldParam.Value = System.DBNull.Value;

            var countParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@count", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = count.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!count.HasValue)
                countParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_updatestaffwork] @staffID, @year, @month, @dayField, @count", staffIDParam, yearParam, monthParam, dayFieldParam, countParam, procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region POCO classes

    // BankType
    public class BankType
    {

        ///<summary>
        /// 银行类型ID
        ///</summary>
        public int BankTypeID { get; set; } // BankTypeID (Primary key)

        ///<summary>
        /// 银行类型
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[BankTypeID] point to this entity (FK_Staff_BankType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_BankType

        public BankType()
        {
            IsDisabled = false;
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // Bulletin
    public class Bulletin
    {

        ///<summary>
        /// 公告ID
        ///</summary>
        public System.Guid BulletinID { get; set; } // BulletinID (Primary key)

        ///<summary>
        /// 是否显示
        ///</summary>
        public bool IsShow { get; set; } // IsShow

        ///<summary>
        /// 标题
        ///</summary>
        public string Title { get; set; } // Title (length: 200)

        ///<summary>
        /// 内容
        ///</summary>
        public string Content { get; set; } // Content (length: 2000)

        ///<summary>
        /// 发布时间
        ///</summary>
        public System.DateTime PublishDate { get; set; } // PublishDate
    }

    // Education
    public class Education
    {

        ///<summary>
        /// 学历ID
        ///</summary>
        public int EducationID { get; set; } // EducationID (Primary key)

        ///<summary>
        /// 学历
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[EducationID] point to this entity (FK_Staff_Education)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_Education

        public Education()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // ExitReason
    public class ExitReason
    {

        ///<summary>
        /// 离职原因ID
        ///</summary>
        public int ExitReasonID { get; set; } // ExitReasonID (Primary key)

        ///<summary>
        /// 离职原因
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[ExitReasonID] point to this entity (FK_Staff_ExitReason)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_ExitReason

        public ExitReason()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // Group
    public class Group
    {

        ///<summary>
        /// 父用户组ID
        ///</summary>
        public System.Guid? ParentID { get; set; } // ParentID

        ///<summary>
        /// 用户组ID
        ///</summary>
        public System.Guid GroupID { get; set; } // GroupID (Primary key)

        ///<summary>
        /// 用户组名称
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 层级
        ///</summary>
        public int Level { get; set; } // Level

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否允许包含用户
        ///</summary>
        public bool IsIncludeUser { get; set; } // IsIncludeUser

        ///<summary>
        /// 是否停用(停用后不能将用户加入该用户组或子组)
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        ///<summary>
        /// 是否是系统分组
        ///</summary>
        public bool IsSystem { get; set; } // IsSystem

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Group pointed by [StaffLeaveAuditFlow].[StaffLeaveAuditFlowID] (FK_StaffLeaveAuditFlow_Group)
        /// </summary>
        public virtual StaffLeaveAuditFlow StaffLeaveAuditFlow { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Group
        /// <summary>
        /// Parent (One-to-One) Group pointed by [StaffTurnoverFlow].[StaffTurnoverAuditFlowID] (FK_StaffTurnoverFlow_Group)
        /// </summary>
        public virtual StaffTurnoverFlow StaffTurnoverFlow { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Group
        /// <summary>
        /// Parent (One-to-One) Group pointed by [Station].[StationID] (FK_Station_Group)
        /// </summary>
        public virtual Station Station { get; set; } // Station.FK_Station_Group
        /// <summary>
        /// Child GroupPolicies where [GroupPolicy].[GroupID] point to this entity (FK_GroupPolicy_Group)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GroupPolicy> GroupPolicies { get; set; } // GroupPolicy.FK_GroupPolicy_Group
        /// <summary>
        /// Child Permissions (Many-to-Many) mapped by table [GroupPermissionRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Permission> Permissions { get; set; } // Many to many mapping
        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [GroupRoleLimit]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Role> Role { get; set; } // Many to many mapping
        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [GroupRoleRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Role> RoleID { get; set; } // Many to many mapping
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditGroupID1] point to this entity (FK_StaffLeaveAuditFlow_Group_AuditGroupID1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> AuditGroupID1 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Group_AuditGroupID1
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditGroupID2] point to this entity (FK_StaffLeaveAuditFlow_Group_AuditGroupID2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> StaffLeaveAuditFlows_AuditGroupID2 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Group_AuditGroupID2
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditGroupID3] point to this entity (FK_StaffLeaveAuditFlow_Group_AuditGroupID3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> StaffLeaveAuditFlows_AuditGroupID3 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Group_AuditGroupID3
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditGroupID4] point to this entity (FK_StaffLeaveAuditFlow_Group_AuditGroupID4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> StaffLeaveAuditFlows_AuditGroupID4 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Group_AuditGroupID4
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[FromGroupID] point to this entity (FK_StaffTurnover_Group_FromGroupID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> FromGroup { get; set; } // StaffTurnover.FK_StaffTurnover_Group_FromGroupID
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[ToGroupID] point to this entity (FK_StaffTurnover_Group_ToGroupID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> ToGroup { get; set; } // StaffTurnover.FK_StaffTurnover_Group_ToGroupID
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditGroupID1] point to this entity (FK_StaffTurnoverFlow_Group_AuditGroupID1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditGroupID1 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Group_AuditGroupID1
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditGroupID2] point to this entity (FK_StaffTurnoverFlow_Group_AuditGroupID2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditGroupID2 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Group_AuditGroupID2
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditGroupID3] point to this entity (FK_StaffTurnoverFlow_Group_AuditGroupID3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditGroupID3 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Group_AuditGroupID3
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditGroupID4] point to this entity (FK_StaffTurnoverFlow_Group_AuditGroupID4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditGroupID4 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Group_AuditGroupID4
        /// <summary>
        /// Child Users where [User].[GroupID] point to this entity (FK_User_Group)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // User.FK_User_Group

        public Group()
        {
            IsDisabled = false;
            GroupPolicies = new System.Collections.Generic.List<GroupPolicy>();
            AuditGroupID1 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            StaffLeaveAuditFlows_AuditGroupID2 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            StaffLeaveAuditFlows_AuditGroupID3 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            StaffLeaveAuditFlows_AuditGroupID4 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            FromGroup = new System.Collections.Generic.List<StaffTurnover>();
            ToGroup = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnoverFlows_AuditGroupID1 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_AuditGroupID2 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_AuditGroupID3 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_AuditGroupID4 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            Users = new System.Collections.Generic.List<User>();
            Permissions = new System.Collections.Generic.List<Permission>();
            Role = new System.Collections.Generic.List<Role>();
            RoleID = new System.Collections.Generic.List<Role>();
        }
    }

    // GroupPolicy
    public class GroupPolicy
    {

        ///<summary>
        /// 部门ID(用户组ID)
        ///</summary>
        public System.Guid GroupID { get; set; } // GroupID (Primary key)

        ///<summary>
        /// 政策ID
        ///</summary>
        public int PolicyID { get; set; } // PolicyID (Primary key)

        ///<summary>
        /// 政策施行开始日期
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// 政策施行结束日期
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        // Foreign keys

        /// <summary>
        /// Parent Group pointed by [GroupPolicy].([GroupID]) (FK_GroupPolicy_Group)
        /// </summary>
        public virtual Group Group { get; set; } // FK_GroupPolicy_Group
        /// <summary>
        /// Parent Policy pointed by [GroupPolicy].([PolicyID]) (FK_GroupPolicy_Policy)
        /// </summary>
        public virtual Policy Policy { get; set; } // FK_GroupPolicy_Policy
    }

    // InsuranceNature
    public class InsuranceNature
    {

        ///<summary>
        /// 保险性质ID
        ///</summary>
        public int InsuranceNatureID { get; set; } // InsuranceNatureID (Primary key)

        ///<summary>
        /// 保险性质
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[InsuranceNatureID] point to this entity (FK_Staff_InsuranceNature)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_InsuranceNature

        public InsuranceNature()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // JobNature
    public class JobNature
    {

        ///<summary>
        /// 用工性质ID
        ///</summary>
        public int JobNatureID { get; set; } // JobNatureID (Primary key)

        ///<summary>
        /// 用工性质
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[JobNatureID] point to this entity (FK_Staff_JobNature)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_JobNature

        public JobNature()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // Log
    public class Log
    {

        ///<summary>
        /// 日志ID
        ///</summary>
        public int LogID { get; set; } // LogID (Primary key)

        ///<summary>
        /// 用户ID
        ///</summary>
        public int UserID { get; set; } // UserID

        ///<summary>
        /// 日志类型
        ///</summary>
        public int TypeID { get; set; } // TypeID

        ///<summary>
        /// 描述
        ///</summary>
        public string Description { get; set; } // Description (length: 1000)

        ///<summary>
        /// IP
        ///</summary>
        public string IP { get; set; } // IP (length: 20)

        ///<summary>
        /// 创建时间
        ///</summary>
        public System.DateTime CreationDate { get; set; } // CreationDate
    }

    // MobileValidationCode
    public class MobileValidationCode
    {

        ///<summary>
        /// 手机号码
        ///</summary>
        public string Mobile { get; set; } // Mobile (Primary key) (length: 20)

        ///<summary>
        /// 验证码
        ///</summary>
        public string ValidationCode { get; set; } // ValidationCode (length: 20)

        ///<summary>
        /// 验证类型ID
        ///</summary>
        public int TypeID { get; set; } // TypeID

        ///<summary>
        /// 创建时间
        ///</summary>
        public System.DateTime CreationDate { get; set; } // CreationDate

        ///<summary>
        /// 到期时间
        ///</summary>
        public System.DateTime ExpirationDate { get; set; } // ExpirationDate

        ///<summary>
        /// 完成验证时间
        ///</summary>
        public System.DateTime? FinishVerifyDate { get; set; } // FinishVerifyDate

        ///<summary>
        /// 已验证次数
        ///</summary>
        public int VerifyTimes { get; set; } // VerifyTimes

        ///<summary>
        /// 最大验证次数
        ///</summary>
        public int MaxVerifyTimes { get; set; } // MaxVerifyTimes
    }

    // Permission
    public class Permission
    {

        ///<summary>
        /// 父权限ID
        ///</summary>
        public System.Guid? ParentID { get; set; } // ParentID

        ///<summary>
        /// 权限ID
        ///</summary>
        public System.Guid PermissionID { get; set; } // PermissionID (Primary key)

        ///<summary>
        /// 模块名称
        ///</summary>
        public string ModuleName { get; set; } // ModuleName (length: 50)

        ///<summary>
        /// 权限名称
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 层级
        ///</summary>
        public int Level { get; set; } // Level

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        // Reverse navigation

        /// <summary>
        /// Child Groups (Many-to-Many) mapped by table [GroupPermissionRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Group> Groups { get; set; } // Many to many mapping
        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [RolePermissionRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Role> Roles { get; set; } // Many to many mapping
        /// <summary>
        /// Child Users (Many-to-Many) mapped by table [UserPermissionRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users { get; set; } // Many to many mapping

        public Permission()
        {
            Groups = new System.Collections.Generic.List<Group>();
            Roles = new System.Collections.Generic.List<Role>();
            Users = new System.Collections.Generic.List<User>();
        }
    }

    // Policy
    public class Policy
    {

        ///<summary>
        /// 政策ID
        ///</summary>
        public int PolicyID { get; set; } // PolicyID (Primary key)

        ///<summary>
        /// 政策名称
        ///</summary>
        public string Name { get; set; } // Name (length: 100)

        ///<summary>
        /// 备注
        ///</summary>
        public string Remark { get; set; } // Remark (length: 1000)

        ///<summary>
        /// 显示名称
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        // Reverse navigation

        /// <summary>
        /// Child GroupPolicies where [GroupPolicy].[PolicyID] point to this entity (FK_GroupPolicy_Policy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<GroupPolicy> GroupPolicies { get; set; } // GroupPolicy.FK_GroupPolicy_Policy
        /// <summary>
        /// Child StaffPolicies where [StaffPolicy].[PolicyID] point to this entity (FK_StaffPolicy_Policy)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffPolicy> StaffPolicies { get; set; } // StaffPolicy.FK_StaffPolicy_Policy

        public Policy()
        {
            GroupPolicies = new System.Collections.Generic.List<GroupPolicy>();
            StaffPolicies = new System.Collections.Generic.List<StaffPolicy>();
        }
    }

    // ProtocolTime
    public class ProtocolTime
    {

        ///<summary>
        /// 协议次数ID
        ///</summary>
        public int ProtocolTimeID { get; set; } // ProtocolTimeID (Primary key)

        ///<summary>
        /// 协议次数
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[ProtocolTimeID] point to this entity (FK_Staff_ProtocolTime)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_ProtocolTime

        public ProtocolTime()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // ProtocolType
    public class ProtocolType
    {

        ///<summary>
        /// 协议类型ID
        ///</summary>
        public int ProtocolTypeID { get; set; } // ProtocolTypeID (Primary key)

        ///<summary>
        /// 协议类型
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[ProtocolTypeID] point to this entity (FK_Staff_ProtocolType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_ProtocolType

        public ProtocolType()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // RecruitChannel
    public class RecruitChannel
    {

        ///<summary>
        /// 招聘渠道ID
        ///</summary>
        public int RecruitChannelID { get; set; } // RecruitChannelID (Primary key)

        ///<summary>
        /// 招聘渠道
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[RecruitChannelID] point to this entity (FK_Staff_RecruitChannel)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_RecruitChannel

        public RecruitChannel()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // RiderJobType
    public class RiderJobType
    {

        ///<summary>
        /// 骑手工作类型ID
        ///</summary>
        public int RiderJobTypeID { get; set; } // RiderJobTypeID (Primary key)

        ///<summary>
        /// 骑手工作类型名称
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否停用
        ///</summary>
        public bool IsDisabled { get; set; } // IsDisabled

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[RiderJobTypeID] point to this entity (FK_Staff_RiderJobType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_RiderJobType
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[FromRiderJobTypeID] point to this entity (FK_StaffTurnover_RiderJobType_FromRiderJobTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> FromRiderJobType { get; set; } // StaffTurnover.FK_StaffTurnover_RiderJobType_FromRiderJobTypeID
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[ToRiderJobTypeID] point to this entity (FK_StaffTurnover_RiderJobType_ToRiderJobTypeID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> ToRiderJobType { get; set; } // StaffTurnover.FK_StaffTurnover_RiderJobType_ToRiderJobTypeID

        public RiderJobType()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
            FromRiderJobType = new System.Collections.Generic.List<StaffTurnover>();
            ToRiderJobType = new System.Collections.Generic.List<StaffTurnover>();
        }
    }

    // Role
    public class Role
    {

        ///<summary>
        /// 角色ID
        ///</summary>
        public System.Guid RoleID { get; set; } // RoleID (Primary key)

        ///<summary>
        /// 角色名称
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 显示名称
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        ///<summary>
        /// 是否是系统角色
        ///</summary>
        public bool IsSystem { get; set; } // IsSystem

        // Reverse navigation

        /// <summary>
        /// Child Groups (Many-to-Many) mapped by table [GroupRoleLimit]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Group> Group { get; set; } // Many to many mapping
        /// <summary>
        /// Child Groups (Many-to-Many) mapped by table [GroupRoleRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Group> GroupID { get; set; } // Many to many mapping
        /// <summary>
        /// Child Permissions (Many-to-Many) mapped by table [RolePermissionRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Permission> Permissions { get; set; } // Many to many mapping
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditRoleID1] point to this entity (FK_StaffLeaveAuditFlow_Role_AuditRoleID1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> AuditRoleID1 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Role_AuditRoleID1
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[RequestRoleID] point to this entity (FK_StaffLeaveAuditFlow_Role_RequestRoleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> RequestRoleID { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Role_RequestRoleID
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditRoleID2] point to this entity (FK_StaffLeaveAuditFlow_Role_AuditRoleID2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> StaffLeaveAuditFlows_AuditRoleID2 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Role_AuditRoleID2
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditRoleID3] point to this entity (FK_StaffLeaveAuditFlow_Role_AuditRoleID3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> StaffLeaveAuditFlows_AuditRoleID3 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Role_AuditRoleID3
        /// <summary>
        /// Child StaffLeaveAuditFlows where [StaffLeaveAuditFlow].[AuditRoleID4] point to this entity (FK_StaffLeaveAuditFlow_Role_AuditRoleID4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeaveAuditFlow> StaffLeaveAuditFlows_AuditRoleID4 { get; set; } // StaffLeaveAuditFlow.FK_StaffLeaveAuditFlow_Role_AuditRoleID4
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[FromRoleID] point to this entity (FK_StaffTurnover_Role_FromRoleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> FromRole { get; set; } // StaffTurnover.FK_StaffTurnover_Role_FromRoleID
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[ToRoleID] point to this entity (FK_StaffTurnover_Role_ToRoleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> ToRole { get; set; } // StaffTurnover.FK_StaffTurnover_Role_ToRoleID
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditRoleID1] point to this entity (FK_StaffTurnoverFlow_Role_AuditRoleID1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditRoleID1 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Role_AuditRoleID1
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditRoleID2] point to this entity (FK_StaffTurnoverFlow_Role_AuditRoleID2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditRoleID2 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Role_AuditRoleID2
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditRoleID3] point to this entity (FK_StaffTurnoverFlow_Role_AuditRoleID3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditRoleID3 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Role_AuditRoleID3
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[AuditRoleID4] point to this entity (FK_StaffTurnoverFlow_Role_AuditRoleID4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_AuditRoleID4 { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Role_AuditRoleID4
        /// <summary>
        /// Child StaffTurnoverFlows where [StaffTurnoverFlow].[RequestRoleID] point to this entity (FK_StaffTurnoverFlow_Role_RequestRoleID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnoverFlow> StaffTurnoverFlows_RequestRoleID { get; set; } // StaffTurnoverFlow.FK_StaffTurnoverFlow_Role_RequestRoleID
        /// <summary>
        /// Child Users (Many-to-Many) mapped by table [UserRoleRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> User { get; set; } // Many to many mapping
        /// <summary>
        /// Child Users where [User].[RoleID] point to this entity (FK_User_Role)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<User> Users_RoleID { get; set; } // User.FK_User_Role

        public Role()
        {
            AuditRoleID1 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            StaffLeaveAuditFlows_AuditRoleID2 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            StaffLeaveAuditFlows_AuditRoleID3 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            StaffLeaveAuditFlows_AuditRoleID4 = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            RequestRoleID = new System.Collections.Generic.List<StaffLeaveAuditFlow>();
            FromRole = new System.Collections.Generic.List<StaffTurnover>();
            ToRole = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnoverFlows_AuditRoleID1 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_AuditRoleID2 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_AuditRoleID3 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_AuditRoleID4 = new System.Collections.Generic.List<StaffTurnoverFlow>();
            StaffTurnoverFlows_RequestRoleID = new System.Collections.Generic.List<StaffTurnoverFlow>();
            Users_RoleID = new System.Collections.Generic.List<User>();
            Group = new System.Collections.Generic.List<Group>();
            GroupID = new System.Collections.Generic.List<Group>();
            Permissions = new System.Collections.Generic.List<Permission>();
            User = new System.Collections.Generic.List<User>();
        }
    }

    // Site
    public class Site
    {

        ///<summary>
        /// 站点ID
        ///</summary>
        public System.Guid SiteID { get; set; } // SiteID (Primary key)

        ///<summary>
        /// 站点名称
        ///</summary>
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// 主机
        ///</summary>
        public string Host { get; set; } // Host (length: 100)

        ///<summary>
        /// 标题
        ///</summary>
        public string Title { get; set; } // Title (length: 200)

        ///<summary>
        /// 关键字
        ///</summary>
        public string Keywords { get; set; } // Keywords (length: 200)

        ///<summary>
        /// 描述
        ///</summary>
        public string Description { get; set; } // Description (length: 500)

        ///<summary>
        /// 版权
        ///</summary>
        public string Copyright { get; set; } // Copyright (length: 1000)

        ///<summary>
        /// 收藏图标链接
        ///</summary>
        public string FaviconURL { get; set; } // FaviconURL (length: 100)

        ///<summary>
        /// 页面标题分隔符
        ///</summary>
        public string PageTitleSeparator { get; set; } // PageTitleSeparator (length: 50)
    }

    // Staff
    public class Staff
    {

        ///<summary>
        /// 员工ID(用户ID)
        ///</summary>
        public int StaffID { get; set; } // StaffID (Primary key)

        ///<summary>
        /// 姓名
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 性别： 1 男 2女
        ///</summary>
        public int? Sex { get; set; } // Sex

        ///<summary>
        /// 年龄
        ///</summary>
        public int? Age { get; set; } // Age

        ///<summary>
        /// 生日
        ///</summary>
        public System.DateTime? Birthday { get; set; } // Birthday

        ///<summary>
        /// 手机号码
        ///</summary>
        public string StaffMobile { get; set; } // StaffMobile (length: 20)

        ///<summary>
        /// 婚姻状况： 1 未婚 2 已婚
        ///</summary>
        public MaritalStatus? MaritalStatus { get; set; } // MaritalStatus

        ///<summary>
        /// 身份证号
        ///</summary>
        public string IDCardNO { get; set; } // IDCardNO (length: 50)

        ///<summary>
        /// 学历ID
        ///</summary>
        public int? EducationID { get; set; } // EducationID

        ///<summary>
        /// 毕业学校
        ///</summary>
        public string School { get; set; } // School (length: 100)

        ///<summary>
        /// 专业
        ///</summary>
        public string Major { get; set; } // Major (length: 20)

        ///<summary>
        /// 户籍
        ///</summary>
        public string Household { get; set; } // Household (length: 20)

        ///<summary>
        /// 居住地
        ///</summary>
        public string Residence { get; set; } // Residence (length: 50)

        ///<summary>
        /// 紧急联系人
        ///</summary>
        public string EmergencyContact { get; set; } // EmergencyContact (length: 20)

        ///<summary>
        /// 紧急联系人与本人关系
        ///</summary>
        public string EmergencyContactRelationship { get; set; } // EmergencyContactRelationship (length: 20)

        ///<summary>
        /// 紧急联系人手机号
        ///</summary>
        public string EmergencyContactMobile { get; set; } // EmergencyContactMobile (length: 20)

        ///<summary>
        /// 招聘渠道ID(内部转介绍必须选择转介绍人、介绍日期、附件)
        ///</summary>
        public int? RecruitChannelID { get; set; } // RecruitChannelID
        public System.DateTime? RiderReferrerAwardsProvideTime { get; set; } // RiderReferrerAwardsProvideTime

        ///<summary>
        /// 介绍人员工ID(必须是跑单者，用户ID、员工ID)
        ///</summary>
        public int? RiderReferrerStaffID { get; set; } // RiderReferrerStaffID

        ///<summary>
        /// 内部转介绍日期
        ///</summary>
        public System.DateTime? RiderReferrerDate { get; set; } // RiderReferrerDate
        public string RiderReferrerRemark { get; set; } // RiderReferrerRemark (length: 100)

        ///<summary>
        /// 内部转介绍附件URL
        ///</summary>
        public string RiderReferrerAttachmentURL { get; set; } // RiderReferrerAttachmentURL (length: 200)

        ///<summary>
        /// 员工状态ID(1 未入职 2 在职 3 离职 4 自离)
        ///</summary>
        public int StaffStatusID { get; set; } // StaffStatusID

        ///<summary>
        /// 是否在黑名单
        ///</summary>
        public bool IsInBlackList { get; set; } // IsInBlackList

        ///<summary>
        /// 进出黑名单原因
        ///</summary>
        public string InBlackListRemark { get; set; } // InBlackListRemark (length: 100)

        ///<summary>
        /// 用工性质ID
        ///</summary>
        public int? JobNatureID { get; set; } // JobNatureID

        ///<summary>
        /// 协议编号
        ///</summary>
        public string ProtocolNO { get; set; } // ProtocolNO (length: 50)

        ///<summary>
        /// 合同期次
        ///</summary>
        public int? ProtocolTimeID { get; set; } // ProtocolTimeID

        ///<summary>
        /// 协议类型（合同类型）ID
        ///</summary>
        public int? ProtocolTypeID { get; set; } // ProtocolTypeID

        ///<summary>
        /// 协议签署日期
        ///</summary>
        public System.DateTime? ProtocolSignedDate { get; set; } // ProtocolSignedDate

        ///<summary>
        /// 协议开始日期
        ///</summary>
        public System.DateTime? ProtocolBeginDate { get; set; } // ProtocolBeginDate

        ///<summary>
        /// 协议结束日期
        ///</summary>
        public System.DateTime? ProtocolEndDate { get; set; } // ProtocolEndDate

        ///<summary>
        /// 保险性质ID
        ///</summary>
        public int? InsuranceNatureID { get; set; } // InsuranceNatureID

        ///<summary>
        /// 保险开始购买日期
        ///</summary>
        public System.DateTime? InsuranceStartBuyDate { get; set; } // InsuranceStartBuyDate

        ///<summary>
        /// 保险结束购买日期
        ///</summary>
        public System.DateTime? InsuranceStopBuyDate { get; set; } // InsuranceStopBuyDate

        ///<summary>
        /// 入职时间
        ///</summary>
        public System.DateTime? EntryDate { get; set; } // EntryDate

        ///<summary>
        /// 入职备注
        ///</summary>
        public string EntryRemark { get; set; } // EntryRemark (length: 100)

        ///<summary>
        /// 离职时间
        ///</summary>
        public System.DateTime? ExitDate { get; set; } // ExitDate

        ///<summary>
        /// 离职原因ID
        ///</summary>
        public int? ExitReasonID { get; set; } // ExitReasonID

        ///<summary>
        /// 离职备注
        ///</summary>
        public string ExitRemark { get; set; } // ExitRemark (length: 100)

        ///<summary>
        /// 银行类型ID（开户行）
        ///</summary>
        public int? BankTypeID { get; set; } // BankTypeID

        ///<summary>
        /// 银行卡号
        ///</summary>
        public string BankNO { get; set; } // BankNO (length: 50)

        ///<summary>
        /// 工号
        ///</summary>
        public string WorkNO { get; set; } // WorkNO (length: 50)

        ///<summary>
        /// 骑手工作类型ID(1 全职 2 全天兼职 3 机动兼职 4 高峰兼职)
        ///</summary>
        public int? RiderJobTypeID { get; set; } // RiderJobTypeID

        ///<summary>
        /// 骑手饿了么ID（可更改，因为骑手重新入职该ID会变化）
        ///</summary>
        public int? RiderEleID { get; set; } // RiderEleID

        ///<summary>
        /// 骑手首单时间(入职时清除，包括重新入职)
        ///</summary>
        public System.DateTime? RiderFirstWorkDate { get; set; } // RiderFirstWorkDate

        ///<summary>
        /// 最后工作日期(随时更新;入职时清除，包括重新入职)
        ///</summary>
        public System.DateTime? RiderLastWorkDate { get; set; } // RiderLastWorkDate
        public byte[] RowVersion { get; private set; } // RowVersion (length: 8)

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[RiderReferrerStaffID] point to this entity (FK_Staff_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_Staff
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[AuditStaffID1] point to this entity (FK_StaffLeave_Staff_AuditStaffID1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> AuditStaffID1 { get; set; } // StaffLeave.FK_StaffLeave_Staff_AuditStaffID1
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[RequestStaffID] point to this entity (FK_StaffLeave_Staff_RequestStaffID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> RequestStaffID { get; set; } // StaffLeave.FK_StaffLeave_Staff_RequestStaffID
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[AuditStaffID2] point to this entity (FK_StaffLeave_Staff_AuditStaffID2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> StaffLeaves_AuditStaffID2 { get; set; } // StaffLeave.FK_StaffLeave_Staff_AuditStaffID2
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[AuditStaffID3] point to this entity (FK_StaffLeave_Staff_AuditStaffID3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> StaffLeaves_AuditStaffID3 { get; set; } // StaffLeave.FK_StaffLeave_Staff_AuditStaffID3
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[AuditStaffID4] point to this entity (FK_StaffLeave_Staff_AuditStaffID4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> StaffLeaves_AuditStaffID4 { get; set; } // StaffLeave.FK_StaffLeave_Staff_AuditStaffID4
        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[TargetStaffID] point to this entity (FK_StaffLeave_Staff_TargetStaffID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> TargetStaffID { get; set; } // StaffLeave.FK_StaffLeave_Staff_TargetStaffID
        /// <summary>
        /// Child StaffPolicies where [StaffPolicy].[StaffID] point to this entity (FK_StaffPolicy_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffPolicy> StaffPolicies { get; set; } // StaffPolicy.FK_StaffPolicy_Staff
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[AuditStaffID1] point to this entity (FK_StaffTurnoverLog_Staff_AuditStaffID1)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers_AuditStaffID1 { get; set; } // StaffTurnover.FK_StaffTurnoverLog_Staff_AuditStaffID1
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[AuditStaffID2] point to this entity (FK_StaffTurnoverLog_Staff_AuditStaffID2)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers_AuditStaffID2 { get; set; } // StaffTurnover.FK_StaffTurnoverLog_Staff_AuditStaffID2
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[AuditStaffID3] point to this entity (FK_StaffTurnoverLog_Staff_AuditStaffID3)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers_AuditStaffID3 { get; set; } // StaffTurnover.FK_StaffTurnoverLog_Staff_AuditStaffID3
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[AuditStaffID4] point to this entity (FK_StaffTurnoverLog_Staff_AuditStaffID4)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers_AuditStaffID4 { get; set; } // StaffTurnover.FK_StaffTurnoverLog_Staff_AuditStaffID4
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[RequestStaffID] point to this entity (FK_StaffTurnoverLog_Staff_RequestStaffID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers_RequestStaffID { get; set; } // StaffTurnover.FK_StaffTurnoverLog_Staff_RequestStaffID
        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[TargetStaffID] point to this entity (FK_StaffTurnoverLog_Staff_TargetStaffID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers_TargetStaffID { get; set; } // StaffTurnover.FK_StaffTurnoverLog_Staff_TargetStaffID
        /// <summary>
        /// Child StaffWorks where [StaffWork].[StaffID] point to this entity (FK_StaffWork_Staff)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffWork> StaffWorks { get; set; } // StaffWork.FK_StaffWork_Staff

        // Foreign keys

        /// <summary>
        /// Parent BankType pointed by [Staff].([BankTypeID]) (FK_Staff_BankType)
        /// </summary>
        public virtual BankType BankType { get; set; } // FK_Staff_BankType
        /// <summary>
        /// Parent Education pointed by [Staff].([EducationID]) (FK_Staff_Education)
        /// </summary>
        public virtual Education Education { get; set; } // FK_Staff_Education
        /// <summary>
        /// Parent ExitReason pointed by [Staff].([ExitReasonID]) (FK_Staff_ExitReason)
        /// </summary>
        public virtual ExitReason ExitReason { get; set; } // FK_Staff_ExitReason
        /// <summary>
        /// Parent InsuranceNature pointed by [Staff].([InsuranceNatureID]) (FK_Staff_InsuranceNature)
        /// </summary>
        public virtual InsuranceNature InsuranceNature { get; set; } // FK_Staff_InsuranceNature
        /// <summary>
        /// Parent JobNature pointed by [Staff].([JobNatureID]) (FK_Staff_JobNature)
        /// </summary>
        public virtual JobNature JobNature { get; set; } // FK_Staff_JobNature
        /// <summary>
        /// Parent ProtocolTime pointed by [Staff].([ProtocolTimeID]) (FK_Staff_ProtocolTime)
        /// </summary>
        public virtual ProtocolTime ProtocolTime { get; set; } // FK_Staff_ProtocolTime
        /// <summary>
        /// Parent ProtocolType pointed by [Staff].([ProtocolTypeID]) (FK_Staff_ProtocolType)
        /// </summary>
        public virtual ProtocolType ProtocolType { get; set; } // FK_Staff_ProtocolType
        /// <summary>
        /// Parent RecruitChannel pointed by [Staff].([RecruitChannelID]) (FK_Staff_RecruitChannel)
        /// </summary>
        public virtual RecruitChannel RecruitChannel { get; set; } // FK_Staff_RecruitChannel
        /// <summary>
        /// Parent RiderJobType pointed by [Staff].([RiderJobTypeID]) (FK_Staff_RiderJobType)
        /// </summary>
        public virtual RiderJobType RiderJobType { get; set; } // FK_Staff_RiderJobType
        /// <summary>
        /// Parent Staff pointed by [Staff].([RiderReferrerStaffID]) (FK_Staff_Staff)
        /// </summary>
        public virtual Staff RiderReferrerStaff { get; set; } // FK_Staff_Staff
        /// <summary>
        /// Parent StaffStatu pointed by [Staff].([StaffStatusID]) (FK_Staff_StaffStatus)
        /// </summary>
        public virtual StaffStatu StaffStatu { get; set; } // FK_Staff_StaffStatus
        /// <summary>
        /// Parent User pointed by [Staff].([StaffID]) (FK_Staff_User)
        /// </summary>
        public virtual User User { get; set; } // FK_Staff_User

        public Staff()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
            AuditStaffID1 = new System.Collections.Generic.List<StaffLeave>();
            StaffLeaves_AuditStaffID2 = new System.Collections.Generic.List<StaffLeave>();
            StaffLeaves_AuditStaffID3 = new System.Collections.Generic.List<StaffLeave>();
            StaffLeaves_AuditStaffID4 = new System.Collections.Generic.List<StaffLeave>();
            RequestStaffID = new System.Collections.Generic.List<StaffLeave>();
            TargetStaffID = new System.Collections.Generic.List<StaffLeave>();
            StaffPolicies = new System.Collections.Generic.List<StaffPolicy>();
            StaffTurnovers_AuditStaffID1 = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnovers_AuditStaffID2 = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnovers_AuditStaffID3 = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnovers_AuditStaffID4 = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnovers_RequestStaffID = new System.Collections.Generic.List<StaffTurnover>();
            StaffTurnovers_TargetStaffID = new System.Collections.Generic.List<StaffTurnover>();
            StaffWorks = new System.Collections.Generic.List<StaffWork>();
        }
    }

    // StaffLeave
    public class StaffLeave
    {

        ///<summary>
        /// 请假ID
        ///</summary>
        public int StaffLeaveID { get; set; } // StaffLeaveID (Primary key)

        ///<summary>
        /// 请假类型ID
        ///</summary>
        public int StaffLeaveTypeID { get; set; } // StaffLeaveTypeID

        ///<summary>
        /// 申请者员工ID(员工ID,用户ID)
        ///</summary>
        public int RequestStaffID { get; set; } // RequestStaffID

        ///<summary>
        /// 目标员工ID(员工ID,用户ID)
        ///</summary>
        public int TargetStaffID { get; set; } // TargetStaffID

        ///<summary>
        /// 请假天数(冗余)
        ///</summary>
        public int HalfDays { get; set; } // HalfDays

        ///<summary>
        /// 请假开始日期
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate
        public int BeginDatePartial { get; set; } // BeginDatePartial

        ///<summary>
        /// 请假结束日期
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate
        public int EndDatePartial { get; set; } // EndDatePartial

        ///<summary>
        /// 申请备注
        ///</summary>
        public string RequestRemark { get; set; } // RequestRemark (length: 1000)

        ///<summary>
        /// 申请附件URL1
        ///</summary>
        public string RequestAttachmentURL1 { get; set; } // RequestAttachmentURL1 (length: 200)

        ///<summary>
        /// 申请附件URL2
        ///</summary>
        public string RequestAttachmentURL2 { get; set; } // RequestAttachmentURL2 (length: 200)

        ///<summary>
        /// 附件1上传时间
        ///</summary>
        public System.DateTime? RequestAttachment1UploadTime { get; set; } // RequestAttachment1UploadTime

        ///<summary>
        /// 附件2上传时间
        ///</summary>
        public System.DateTime? RequestAttachment2UploadTime { get; set; } // RequestAttachment2UploadTime

        ///<summary>
        /// 创建日期（申请时间）
        ///</summary>
        public System.DateTime CreationDate { get; set; } // CreationDate

        ///<summary>
        /// 审核状态(0 未审 1 一级审核通过 2 一级审核拒绝 3 二级审核通过 4 二级审核拒绝 ... )
        ///</summary>
        public StaffLeaveAuditStatus AuditStatus { get; set; } // AuditStatus

        ///<summary>
        /// 当前审核层级
        ///</summary>
        public int AuditStaffLevelCurrent { get; set; } // AuditStaffLevelCurrent

        ///<summary>
        /// 最大审批层级
        ///</summary>
        public int? AuditStaffLevelMax { get; set; } // AuditStaffLevelMax

        ///<summary>
        /// 一级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID1 { get; set; } // AuditStaffID1

        ///<summary>
        /// 二级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID2 { get; set; } // AuditStaffID2

        ///<summary>
        /// 三级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID3 { get; set; } // AuditStaffID3

        ///<summary>
        /// 四级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID4 { get; set; } // AuditStaffID4

        ///<summary>
        /// 一级审核时间
        ///</summary>
        public System.DateTime? AuditDate1 { get; set; } // AuditDate1

        ///<summary>
        /// 二级审核时间
        ///</summary>
        public System.DateTime? AuditDate2 { get; set; } // AuditDate2

        ///<summary>
        /// 三级审核时间
        ///</summary>
        public System.DateTime? AuditDate3 { get; set; } // AuditDate3

        ///<summary>
        /// 四级审核时间
        ///</summary>
        public System.DateTime? AuditDate4 { get; set; } // AuditDate4

        ///<summary>
        /// 一级审核备注
        ///</summary>
        public string AuditRemark1 { get; set; } // AuditRemark1 (length: 1000)

        ///<summary>
        /// 二级审核时间
        ///</summary>
        public string AuditRemark2 { get; set; } // AuditRemark2 (length: 1000)

        ///<summary>
        /// 三级审核时间
        ///</summary>
        public string AuditRemark3 { get; set; } // AuditRemark3 (length: 1000)

        ///<summary>
        /// 四级审核时间
        ///</summary>
        public string AuditRemark4 { get; set; } // AuditRemark4 (length: 1000)
        public byte[] RowVersion { get; private set; } // RowVersion (length: 8)

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([RequestStaffID]) (FK_StaffLeave_Staff_RequestStaffID)
        /// </summary>
        public virtual Staff RequestStaff { get; set; } // FK_StaffLeave_Staff_RequestStaffID
        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([AuditStaffID1]) (FK_StaffLeave_Staff_AuditStaffID1)
        /// </summary>
        public virtual Staff Staff_AuditStaffID1 { get; set; } // FK_StaffLeave_Staff_AuditStaffID1
        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([AuditStaffID2]) (FK_StaffLeave_Staff_AuditStaffID2)
        /// </summary>
        public virtual Staff Staff_AuditStaffID2 { get; set; } // FK_StaffLeave_Staff_AuditStaffID2
        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([AuditStaffID3]) (FK_StaffLeave_Staff_AuditStaffID3)
        /// </summary>
        public virtual Staff Staff_AuditStaffID3 { get; set; } // FK_StaffLeave_Staff_AuditStaffID3
        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([AuditStaffID4]) (FK_StaffLeave_Staff_AuditStaffID4)
        /// </summary>
        public virtual Staff Staff_AuditStaffID4 { get; set; } // FK_StaffLeave_Staff_AuditStaffID4
        /// <summary>
        /// Parent Staff pointed by [StaffLeave].([TargetStaffID]) (FK_StaffLeave_Staff_TargetStaffID)
        /// </summary>
        public virtual Staff TargetStaff { get; set; } // FK_StaffLeave_Staff_TargetStaffID
        /// <summary>
        /// Parent StaffLeaveType pointed by [StaffLeave].([StaffLeaveTypeID]) (FK_StaffLeave_StaffLeaveType)
        /// </summary>
        public virtual StaffLeaveType StaffLeaveType { get; set; } // FK_StaffLeave_StaffLeaveType
    }

    // StaffLeaveAuditFlow
    public class StaffLeaveAuditFlow
    {
        public System.Guid StaffLeaveAuditFlowID { get; set; } // StaffLeaveAuditFlowID (Primary key)

        ///<summary>
        /// 申请角色ID
        ///</summary>
        public System.Guid RequestRoleID { get; set; } // RequestRoleID

        ///<summary>
        /// 1级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID1 { get; set; } // AuditGroupID1

        ///<summary>
        /// 2级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID2 { get; set; } // AuditGroupID2

        ///<summary>
        /// 3级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID3 { get; set; } // AuditGroupID3

        ///<summary>
        /// 4级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID4 { get; set; } // AuditGroupID4

        ///<summary>
        /// 1级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID1 { get; set; } // AuditRoleID1

        ///<summary>
        /// 2级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID2 { get; set; } // AuditRoleID2

        ///<summary>
        /// 3级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID3 { get; set; } // AuditRoleID3

        ///<summary>
        /// 4级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID4 { get; set; } // AuditRoleID4

        ///<summary>
        /// 1级审核请假天数
        ///</summary>
        public int? AuditStaffLevelMaxDays1 { get; set; } // AuditStaffLevelMaxDays1

        ///<summary>
        /// 2级审核请假天数
        ///</summary>
        public int? AuditStaffLevelMaxDays2 { get; set; } // AuditStaffLevelMaxDays2

        ///<summary>
        /// 3级审核请假天数
        ///</summary>
        public int? AuditStaffLevelMaxDays3 { get; set; } // AuditStaffLevelMaxDays3

        ///<summary>
        /// 4级审核请假天数
        ///</summary>
        public int? AuditStaffLevelMaxDays4 { get; set; } // AuditStaffLevelMaxDays4

        // Foreign keys

        /// <summary>
        /// Parent Group pointed by [StaffLeaveAuditFlow].([AuditGroupID1]) (FK_StaffLeaveAuditFlow_Group_AuditGroupID1)
        /// </summary>
        public virtual Group Group_AuditGroupID1 { get; set; } // FK_StaffLeaveAuditFlow_Group_AuditGroupID1
        /// <summary>
        /// Parent Group pointed by [StaffLeaveAuditFlow].([AuditGroupID2]) (FK_StaffLeaveAuditFlow_Group_AuditGroupID2)
        /// </summary>
        public virtual Group Group_AuditGroupID2 { get; set; } // FK_StaffLeaveAuditFlow_Group_AuditGroupID2
        /// <summary>
        /// Parent Group pointed by [StaffLeaveAuditFlow].([AuditGroupID3]) (FK_StaffLeaveAuditFlow_Group_AuditGroupID3)
        /// </summary>
        public virtual Group Group_AuditGroupID3 { get; set; } // FK_StaffLeaveAuditFlow_Group_AuditGroupID3
        /// <summary>
        /// Parent Group pointed by [StaffLeaveAuditFlow].([AuditGroupID4]) (FK_StaffLeaveAuditFlow_Group_AuditGroupID4)
        /// </summary>
        public virtual Group Group_AuditGroupID4 { get; set; } // FK_StaffLeaveAuditFlow_Group_AuditGroupID4
        /// <summary>
        /// Parent Group pointed by [StaffLeaveAuditFlow].([StaffLeaveAuditFlowID]) (FK_StaffLeaveAuditFlow_Group)
        /// </summary>
        public virtual Group Group_StaffLeaveAuditFlowID { get; set; } // FK_StaffLeaveAuditFlow_Group
        /// <summary>
        /// Parent Role pointed by [StaffLeaveAuditFlow].([RequestRoleID]) (FK_StaffLeaveAuditFlow_Role_RequestRoleID)
        /// </summary>
        public virtual Role RequestRole { get; set; } // FK_StaffLeaveAuditFlow_Role_RequestRoleID
        /// <summary>
        /// Parent Role pointed by [StaffLeaveAuditFlow].([AuditRoleID1]) (FK_StaffLeaveAuditFlow_Role_AuditRoleID1)
        /// </summary>
        public virtual Role Role_AuditRoleID1 { get; set; } // FK_StaffLeaveAuditFlow_Role_AuditRoleID1
        /// <summary>
        /// Parent Role pointed by [StaffLeaveAuditFlow].([AuditRoleID2]) (FK_StaffLeaveAuditFlow_Role_AuditRoleID2)
        /// </summary>
        public virtual Role Role_AuditRoleID2 { get; set; } // FK_StaffLeaveAuditFlow_Role_AuditRoleID2
        /// <summary>
        /// Parent Role pointed by [StaffLeaveAuditFlow].([AuditRoleID3]) (FK_StaffLeaveAuditFlow_Role_AuditRoleID3)
        /// </summary>
        public virtual Role Role_AuditRoleID3 { get; set; } // FK_StaffLeaveAuditFlow_Role_AuditRoleID3
        /// <summary>
        /// Parent Role pointed by [StaffLeaveAuditFlow].([AuditRoleID4]) (FK_StaffLeaveAuditFlow_Role_AuditRoleID4)
        /// </summary>
        public virtual Role Role_AuditRoleID4 { get; set; } // FK_StaffLeaveAuditFlow_Role_AuditRoleID4
    }

    // StaffLeaveType
    public class StaffLeaveType
    {

        ///<summary>
        /// 请假类型ID
        ///</summary>
        public int StaffLeaveTypeID { get; set; } // StaffLeaveTypeID (Primary key)

        ///<summary>
        /// 请假类型名称
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        // Reverse navigation

        /// <summary>
        /// Child StaffLeaves where [StaffLeave].[StaffLeaveTypeID] point to this entity (FK_StaffLeave_StaffLeaveType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffLeave> StaffLeaves { get; set; } // StaffLeave.FK_StaffLeave_StaffLeaveType

        public StaffLeaveType()
        {
            StaffLeaves = new System.Collections.Generic.List<StaffLeave>();
        }
    }

    // StaffPolicy
    public class StaffPolicy
    {

        ///<summary>
        /// 员工ID(用户ID)
        ///</summary>
        public int StaffID { get; set; } // StaffID (Primary key)

        ///<summary>
        /// 政策ID
        ///</summary>
        public int PolicyID { get; set; } // PolicyID (Primary key)

        ///<summary>
        /// 政策施行开始日期
        ///</summary>
        public System.DateTime BeginDate { get; set; } // BeginDate

        ///<summary>
        /// 政策施行结束日期
        ///</summary>
        public System.DateTime EndDate { get; set; } // EndDate

        // Foreign keys

        /// <summary>
        /// Parent Policy pointed by [StaffPolicy].([PolicyID]) (FK_StaffPolicy_Policy)
        /// </summary>
        public virtual Policy Policy { get; set; } // FK_StaffPolicy_Policy
        /// <summary>
        /// Parent Staff pointed by [StaffPolicy].([StaffID]) (FK_StaffPolicy_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffPolicy_Staff
    }

    // StaffStatus
    public class StaffStatu
    {

        ///<summary>
        /// 员工状态ID
        ///</summary>
        public int StaffStatusID { get; set; } // StaffStatusID (Primary key)

        ///<summary>
        /// 员工状态名称
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        // Reverse navigation

        /// <summary>
        /// Child Staffs where [Staff].[StaffStatusID] point to this entity (FK_Staff_StaffStatus)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Staff> Staffs { get; set; } // Staff.FK_Staff_StaffStatus

        public StaffStatu()
        {
            Staffs = new System.Collections.Generic.List<Staff>();
        }
    }

    // StaffTurnover
    public class StaffTurnover
    {

        ///<summary>
        /// 员工职位流转日志ID
        ///</summary>
        public int StaffTurnoverID { get; set; } // StaffTurnoverID (Primary key)

        ///<summary>
        /// 员工职位流转日志类型ID
        ///</summary>
        public int StaffTurnoverTypeID { get; set; } // StaffTurnoverTypeID

        ///<summary>
        /// 申请者员工ID(员工ID,用户ID)
        ///</summary>
        public int RequestStaffID { get; set; } // RequestStaffID

        ///<summary>
        /// 目标员工ID(员工ID,用户ID)
        ///</summary>
        public int TargetStaffID { get; set; } // TargetStaffID

        ///<summary>
        /// 来源部门ID(用户组ID)
        ///</summary>
        public System.Guid? FromGroupID { get; set; } // FromGroupID

        ///<summary>
        /// 来源职级ID(角色ID)
        ///</summary>
        public System.Guid? FromRoleID { get; set; } // FromRoleID

        ///<summary>
        /// 来源职位类型ID
        ///</summary>
        public int? FromRiderJobTypeID { get; set; } // FromRiderJobTypeID

        ///<summary>
        /// 目标部门ID(用户组ID)
        ///</summary>
        public System.Guid? ToGroupID { get; set; } // ToGroupID

        ///<summary>
        /// 目标职级ID(角色ID)
        ///</summary>
        public System.Guid? ToRoleID { get; set; } // ToRoleID

        ///<summary>
        /// 目标职位类型ID
        ///</summary>
        public int? ToRiderJobTypeID { get; set; } // ToRiderJobTypeID

        ///<summary>
        /// 申请备注
        ///</summary>
        public string RequestRemark { get; set; } // RequestRemark (length: 1000)

        ///<summary>
        /// 创建时间
        ///</summary>
        public System.DateTime CreationDate { get; set; } // CreationDate
        public System.DateTime EffectiveDate { get; set; } // EffectiveDate

        ///<summary>
        /// 审核状态(0 未审 1 一级审核通过 2 一级审核拒绝 3 二级审核通过 4 二级审核拒绝 ... )
        ///</summary>
        public int AuditStatus { get; set; } // AuditStatus

        ///<summary>
        /// 当前审核层级
        ///</summary>
        public int AuditStaffLevelCurrent { get; set; } // AuditStaffLevelCurrent

        ///<summary>
        /// 最大审批层级
        ///</summary>
        public int AuditStaffLevelMax { get; set; } // AuditStaffLevelMax

        ///<summary>
        /// 一级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID1 { get; set; } // AuditStaffID1

        ///<summary>
        /// 二级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID2 { get; set; } // AuditStaffID2

        ///<summary>
        /// 三级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID3 { get; set; } // AuditStaffID3

        ///<summary>
        /// 四级审核员ID(员工ID,用户ID)
        ///</summary>
        public int? AuditStaffID4 { get; set; } // AuditStaffID4

        ///<summary>
        /// 一级审核时间
        ///</summary>
        public System.DateTime? AuditDate1 { get; set; } // AuditDate1

        ///<summary>
        /// 二级审核时间
        ///</summary>
        public System.DateTime? AuditDate2 { get; set; } // AuditDate2

        ///<summary>
        /// 三级审核时间
        ///</summary>
        public System.DateTime? AuditDate3 { get; set; } // AuditDate3

        ///<summary>
        /// 四级审核时间
        ///</summary>
        public System.DateTime? AuditDate4 { get; set; } // AuditDate4

        ///<summary>
        /// 一级审核备注
        ///</summary>
        public string AuditRemark1 { get; set; } // AuditRemark1 (length: 1000)

        ///<summary>
        /// 二级审核时间
        ///</summary>
        public string AuditRemark2 { get; set; } // AuditRemark2 (length: 1000)

        ///<summary>
        /// 三级审核时间
        ///</summary>
        public string AuditRemark3 { get; set; } // AuditRemark3 (length: 1000)

        ///<summary>
        /// 四级审核时间
        ///</summary>
        public string AuditRemark4 { get; set; } // AuditRemark4 (length: 1000)
        public byte[] RowVersion { get; private set; } // RowVersion (length: 8)

        // Foreign keys

        /// <summary>
        /// Parent Group pointed by [StaffTurnover].([FromGroupID]) (FK_StaffTurnover_Group_FromGroupID)
        /// </summary>
        public virtual Group FromGroup { get; set; } // FK_StaffTurnover_Group_FromGroupID
        /// <summary>
        /// Parent Group pointed by [StaffTurnover].([ToGroupID]) (FK_StaffTurnover_Group_ToGroupID)
        /// </summary>
        public virtual Group ToGroup { get; set; } // FK_StaffTurnover_Group_ToGroupID
        /// <summary>
        /// Parent RiderJobType pointed by [StaffTurnover].([FromRiderJobTypeID]) (FK_StaffTurnover_RiderJobType_FromRiderJobTypeID)
        /// </summary>
        public virtual RiderJobType FromRiderJobType { get; set; } // FK_StaffTurnover_RiderJobType_FromRiderJobTypeID
        /// <summary>
        /// Parent RiderJobType pointed by [StaffTurnover].([ToRiderJobTypeID]) (FK_StaffTurnover_RiderJobType_ToRiderJobTypeID)
        /// </summary>
        public virtual RiderJobType ToRiderJobType { get; set; } // FK_StaffTurnover_RiderJobType_ToRiderJobTypeID
        /// <summary>
        /// Parent Role pointed by [StaffTurnover].([FromRoleID]) (FK_StaffTurnover_Role_FromRoleID)
        /// </summary>
        public virtual Role FromRole { get; set; } // FK_StaffTurnover_Role_FromRoleID
        /// <summary>
        /// Parent Role pointed by [StaffTurnover].([ToRoleID]) (FK_StaffTurnover_Role_ToRoleID)
        /// </summary>
        public virtual Role ToRole { get; set; } // FK_StaffTurnover_Role_ToRoleID
        /// <summary>
        /// Parent Staff pointed by [StaffTurnover].([RequestStaffID]) (FK_StaffTurnoverLog_Staff_RequestStaffID)
        /// </summary>
        public virtual Staff RequestStaff { get; set; } // FK_StaffTurnoverLog_Staff_RequestStaffID
        /// <summary>
        /// Parent Staff pointed by [StaffTurnover].([AuditStaffID1]) (FK_StaffTurnoverLog_Staff_AuditStaffID1)
        /// </summary>
        public virtual Staff Staff_AuditStaffID1 { get; set; } // FK_StaffTurnoverLog_Staff_AuditStaffID1
        /// <summary>
        /// Parent Staff pointed by [StaffTurnover].([AuditStaffID2]) (FK_StaffTurnoverLog_Staff_AuditStaffID2)
        /// </summary>
        public virtual Staff Staff_AuditStaffID2 { get; set; } // FK_StaffTurnoverLog_Staff_AuditStaffID2
        /// <summary>
        /// Parent Staff pointed by [StaffTurnover].([AuditStaffID3]) (FK_StaffTurnoverLog_Staff_AuditStaffID3)
        /// </summary>
        public virtual Staff Staff_AuditStaffID3 { get; set; } // FK_StaffTurnoverLog_Staff_AuditStaffID3
        /// <summary>
        /// Parent Staff pointed by [StaffTurnover].([AuditStaffID4]) (FK_StaffTurnoverLog_Staff_AuditStaffID4)
        /// </summary>
        public virtual Staff Staff_AuditStaffID4 { get; set; } // FK_StaffTurnoverLog_Staff_AuditStaffID4
        /// <summary>
        /// Parent Staff pointed by [StaffTurnover].([TargetStaffID]) (FK_StaffTurnoverLog_Staff_TargetStaffID)
        /// </summary>
        public virtual Staff TargetStaff { get; set; } // FK_StaffTurnoverLog_Staff_TargetStaffID
        /// <summary>
        /// Parent StaffTurnoverType pointed by [StaffTurnover].([StaffTurnoverTypeID]) (FK_StaffTurnover_StaffTurnoverType)
        /// </summary>
        public virtual StaffTurnoverType StaffTurnoverType { get; set; } // FK_StaffTurnover_StaffTurnoverType
    }

    // StaffTurnoverFlow
    public class StaffTurnoverFlow
    {
        public System.Guid StaffTurnoverAuditFlowID { get; set; } // StaffTurnoverAuditFlowID (Primary key)

        ///<summary>
        /// 申请角色ID
        ///</summary>
        public System.Guid RequestRoleID { get; set; } // RequestRoleID

        ///<summary>
        /// 1级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID1 { get; set; } // AuditGroupID1

        ///<summary>
        /// 2级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID2 { get; set; } // AuditGroupID2

        ///<summary>
        /// 3级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID3 { get; set; } // AuditGroupID3

        ///<summary>
        /// 4级审核组ID
        ///</summary>
        public System.Guid? AuditGroupID4 { get; set; } // AuditGroupID4

        ///<summary>
        /// 1级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID1 { get; set; } // AuditRoleID1

        ///<summary>
        /// 2级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID2 { get; set; } // AuditRoleID2

        ///<summary>
        /// 3级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID3 { get; set; } // AuditRoleID3

        ///<summary>
        /// 4级审核角色ID
        ///</summary>
        public System.Guid? AuditRoleID4 { get; set; } // AuditRoleID4

        // Foreign keys

        /// <summary>
        /// Parent Group pointed by [StaffTurnoverFlow].([AuditGroupID1]) (FK_StaffTurnoverFlow_Group_AuditGroupID1)
        /// </summary>
        public virtual Group Group_AuditGroupID1 { get; set; } // FK_StaffTurnoverFlow_Group_AuditGroupID1
        /// <summary>
        /// Parent Group pointed by [StaffTurnoverFlow].([AuditGroupID2]) (FK_StaffTurnoverFlow_Group_AuditGroupID2)
        /// </summary>
        public virtual Group Group_AuditGroupID2 { get; set; } // FK_StaffTurnoverFlow_Group_AuditGroupID2
        /// <summary>
        /// Parent Group pointed by [StaffTurnoverFlow].([AuditGroupID3]) (FK_StaffTurnoverFlow_Group_AuditGroupID3)
        /// </summary>
        public virtual Group Group_AuditGroupID3 { get; set; } // FK_StaffTurnoverFlow_Group_AuditGroupID3
        /// <summary>
        /// Parent Group pointed by [StaffTurnoverFlow].([AuditGroupID4]) (FK_StaffTurnoverFlow_Group_AuditGroupID4)
        /// </summary>
        public virtual Group Group_AuditGroupID4 { get; set; } // FK_StaffTurnoverFlow_Group_AuditGroupID4
        /// <summary>
        /// Parent Group pointed by [StaffTurnoverFlow].([StaffTurnoverAuditFlowID]) (FK_StaffTurnoverFlow_Group)
        /// </summary>
        public virtual Group StaffTurnoverAuditFlow { get; set; } // FK_StaffTurnoverFlow_Group
        /// <summary>
        /// Parent Role pointed by [StaffTurnoverFlow].([RequestRoleID]) (FK_StaffTurnoverFlow_Role_RequestRoleID)
        /// </summary>
        public virtual Role RequestRole { get; set; } // FK_StaffTurnoverFlow_Role_RequestRoleID
        /// <summary>
        /// Parent Role pointed by [StaffTurnoverFlow].([AuditRoleID1]) (FK_StaffTurnoverFlow_Role_AuditRoleID1)
        /// </summary>
        public virtual Role Role_AuditRoleID1 { get; set; } // FK_StaffTurnoverFlow_Role_AuditRoleID1
        /// <summary>
        /// Parent Role pointed by [StaffTurnoverFlow].([AuditRoleID2]) (FK_StaffTurnoverFlow_Role_AuditRoleID2)
        /// </summary>
        public virtual Role Role_AuditRoleID2 { get; set; } // FK_StaffTurnoverFlow_Role_AuditRoleID2
        /// <summary>
        /// Parent Role pointed by [StaffTurnoverFlow].([AuditRoleID3]) (FK_StaffTurnoverFlow_Role_AuditRoleID3)
        /// </summary>
        public virtual Role Role_AuditRoleID3 { get; set; } // FK_StaffTurnoverFlow_Role_AuditRoleID3
        /// <summary>
        /// Parent Role pointed by [StaffTurnoverFlow].([AuditRoleID4]) (FK_StaffTurnoverFlow_Role_AuditRoleID4)
        /// </summary>
        public virtual Role Role_AuditRoleID4 { get; set; } // FK_StaffTurnoverFlow_Role_AuditRoleID4
    }

    // StaffTurnoverType
    public class StaffTurnoverType
    {

        ///<summary>
        /// 员工职位流转日志类型ID
        ///</summary>
        public int StaffTurnoverTypeID { get; set; } // StaffTurnoverTypeID (Primary key)

        ///<summary>
        /// 员工职位流转日志类型名称
        ///</summary>
        public string Name { get; set; } // Name (length: 20)

        ///<summary>
        /// 显示序号
        ///</summary>
        public int DisplayOrder { get; set; } // DisplayOrder

        // Reverse navigation

        /// <summary>
        /// Child StaffTurnovers where [StaffTurnover].[StaffTurnoverTypeID] point to this entity (FK_StaffTurnover_StaffTurnoverType)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<StaffTurnover> StaffTurnovers { get; set; } // StaffTurnover.FK_StaffTurnover_StaffTurnoverType

        public StaffTurnoverType()
        {
            StaffTurnovers = new System.Collections.Generic.List<StaffTurnover>();
        }
    }

    // StaffWork
    public class StaffWork
    {
        public int StaffID { get; set; } // StaffID (Primary key)
        public int Year { get; set; } // Year (Primary key)
        public int Month { get; set; } // Month (Primary key)
        public int Day0101 { get; set; } // Day0101
        public int Day0102 { get; set; } // Day0102
        public int Day0103 { get; set; } // Day0103
        public int Day0104 { get; set; } // Day0104
        public int Day0105 { get; set; } // Day0105
        public int Day0201 { get; set; } // Day0201
        public int Day0202 { get; set; } // Day0202
        public int Day0203 { get; set; } // Day0203
        public int Day0204 { get; set; } // Day0204
        public int Day0205 { get; set; } // Day0205
        public int Day0301 { get; set; } // Day0301
        public int Day0302 { get; set; } // Day0302
        public int Day0303 { get; set; } // Day0303
        public int Day0304 { get; set; } // Day0304
        public int Day0305 { get; set; } // Day0305
        public int Day0401 { get; set; } // Day0401
        public int Day0402 { get; set; } // Day0402
        public int Day0403 { get; set; } // Day0403
        public int Day0404 { get; set; } // Day0404
        public int Day0405 { get; set; } // Day0405
        public int Day0501 { get; set; } // Day0501
        public int Day0502 { get; set; } // Day0502
        public int Day0503 { get; set; } // Day0503
        public int Day0504 { get; set; } // Day0504
        public int Day0505 { get; set; } // Day0505
        public int Day0601 { get; set; } // Day0601
        public int Day0602 { get; set; } // Day0602
        public int Day0603 { get; set; } // Day0603
        public int Day0604 { get; set; } // Day0604
        public int Day0605 { get; set; } // Day0605
        public int Day0701 { get; set; } // Day0701
        public int Day0702 { get; set; } // Day0702
        public int Day0703 { get; set; } // Day0703
        public int Day0704 { get; set; } // Day0704
        public int Day0705 { get; set; } // Day0705
        public int Day0801 { get; set; } // Day0801
        public int Day0802 { get; set; } // Day0802
        public int Day0803 { get; set; } // Day0803
        public int Day0804 { get; set; } // Day0804
        public int Day0805 { get; set; } // Day0805
        public int Day0901 { get; set; } // Day0901
        public int Day0902 { get; set; } // Day0902
        public int Day0903 { get; set; } // Day0903
        public int Day0904 { get; set; } // Day0904
        public int Day0905 { get; set; } // Day0905
        public int Day1001 { get; set; } // Day1001
        public int Day1002 { get; set; } // Day1002
        public int Day1003 { get; set; } // Day1003
        public int Day1004 { get; set; } // Day1004
        public int Day1005 { get; set; } // Day1005
        public int Day1101 { get; set; } // Day1101
        public int Day1102 { get; set; } // Day1102
        public int Day1103 { get; set; } // Day1103
        public int Day1104 { get; set; } // Day1104
        public int Day1105 { get; set; } // Day1105
        public int Day1201 { get; set; } // Day1201
        public int Day1202 { get; set; } // Day1202
        public int Day1203 { get; set; } // Day1203
        public int Day1204 { get; set; } // Day1204
        public int Day1205 { get; set; } // Day1205
        public int Day1301 { get; set; } // Day1301
        public int Day1302 { get; set; } // Day1302
        public int Day1303 { get; set; } // Day1303
        public int Day1304 { get; set; } // Day1304
        public int Day1305 { get; set; } // Day1305
        public int Day1401 { get; set; } // Day1401
        public int Day1402 { get; set; } // Day1402
        public int Day1403 { get; set; } // Day1403
        public int Day1404 { get; set; } // Day1404
        public int Day1405 { get; set; } // Day1405
        public int Day1501 { get; set; } // Day1501
        public int Day1502 { get; set; } // Day1502
        public int Day1503 { get; set; } // Day1503
        public int Day1504 { get; set; } // Day1504
        public int Day1505 { get; set; } // Day1505
        public int Day1601 { get; set; } // Day1601
        public int Day1602 { get; set; } // Day1602
        public int Day1603 { get; set; } // Day1603
        public int Day1604 { get; set; } // Day1604
        public int Day1605 { get; set; } // Day1605
        public int Day1701 { get; set; } // Day1701
        public int Day1702 { get; set; } // Day1702
        public int Day1703 { get; set; } // Day1703
        public int Day1704 { get; set; } // Day1704
        public int Day1705 { get; set; } // Day1705
        public int Day1801 { get; set; } // Day1801
        public int Day1802 { get; set; } // Day1802
        public int Day1803 { get; set; } // Day1803
        public int Day1804 { get; set; } // Day1804
        public int Day1805 { get; set; } // Day1805
        public int Day1901 { get; set; } // Day1901
        public int Day1902 { get; set; } // Day1902
        public int Day1903 { get; set; } // Day1903
        public int Day1904 { get; set; } // Day1904
        public int Day1905 { get; set; } // Day1905
        public int Day2001 { get; set; } // Day2001
        public int Day2002 { get; set; } // Day2002
        public int Day2003 { get; set; } // Day2003
        public int Day2004 { get; set; } // Day2004
        public int Day2005 { get; set; } // Day2005
        public int Day2101 { get; set; } // Day2101
        public int Day2102 { get; set; } // Day2102
        public int Day2103 { get; set; } // Day2103
        public int Day2104 { get; set; } // Day2104
        public int Day2105 { get; set; } // Day2105
        public int Day2201 { get; set; } // Day2201
        public int Day2202 { get; set; } // Day2202
        public int Day2203 { get; set; } // Day2203
        public int Day2204 { get; set; } // Day2204
        public int Day2205 { get; set; } // Day2205
        public int Day2301 { get; set; } // Day2301
        public int Day2302 { get; set; } // Day2302
        public int Day2303 { get; set; } // Day2303
        public int Day2304 { get; set; } // Day2304
        public int Day2305 { get; set; } // Day2305
        public int Day2401 { get; set; } // Day2401
        public int Day2402 { get; set; } // Day2402
        public int Day2403 { get; set; } // Day2403
        public int Day2404 { get; set; } // Day2404
        public int Day2405 { get; set; } // Day2405
        public int Day2501 { get; set; } // Day2501
        public int Day2502 { get; set; } // Day2502
        public int Day2503 { get; set; } // Day2503
        public int Day2504 { get; set; } // Day2504
        public int Day2505 { get; set; } // Day2505
        public int Day2601 { get; set; } // Day2601
        public int Day2602 { get; set; } // Day2602
        public int Day2603 { get; set; } // Day2603
        public int Day2604 { get; set; } // Day2604
        public int Day2605 { get; set; } // Day2605
        public int Day2701 { get; set; } // Day2701
        public int Day2702 { get; set; } // Day2702
        public int Day2703 { get; set; } // Day2703
        public int Day2704 { get; set; } // Day2704
        public int Day2705 { get; set; } // Day2705
        public int Day2801 { get; set; } // Day2801
        public int Day2802 { get; set; } // Day2802
        public int Day2803 { get; set; } // Day2803
        public int Day2804 { get; set; } // Day2804
        public int Day2805 { get; set; } // Day2805
        public int Day2901 { get; set; } // Day2901
        public int Day2902 { get; set; } // Day2902
        public int Day2903 { get; set; } // Day2903
        public int Day2904 { get; set; } // Day2904
        public int Day2905 { get; set; } // Day2905
        public int Day3001 { get; set; } // Day3001
        public int Day3002 { get; set; } // Day3002
        public int Day3003 { get; set; } // Day3003
        public int Day3004 { get; set; } // Day3004
        public int Day3005 { get; set; } // Day3005
        public int Day3101 { get; set; } // Day3101
        public int Day3102 { get; set; } // Day3102
        public int Day3103 { get; set; } // Day3103
        public int Day3104 { get; set; } // Day3104
        public int Day3105 { get; set; } // Day3105

        // Foreign keys

        /// <summary>
        /// Parent Staff pointed by [StaffWork].([StaffID]) (FK_StaffWork_Staff)
        /// </summary>
        public virtual Staff Staff { get; set; } // FK_StaffWork_Staff

        public StaffWork()
        {
            Day0101 = 0;
            Day0102 = 0;
            Day0103 = 0;
            Day0104 = 0;
            Day0105 = 0;
            Day0201 = 0;
            Day0202 = 0;
            Day0203 = 0;
            Day0204 = 0;
            Day0205 = 0;
            Day0301 = 0;
            Day0302 = 0;
            Day0303 = 0;
            Day0304 = 0;
            Day0305 = 0;
            Day0401 = 0;
            Day0402 = 0;
            Day0403 = 0;
            Day0404 = 0;
            Day0405 = 0;
            Day0501 = 0;
            Day0502 = 0;
            Day0503 = 0;
            Day0504 = 0;
            Day0505 = 0;
            Day0601 = 0;
            Day0602 = 0;
            Day0603 = 0;
            Day0604 = 0;
            Day0605 = 0;
            Day0701 = 0;
            Day0702 = 0;
            Day0703 = 0;
            Day0704 = 0;
            Day0705 = 0;
            Day0801 = 0;
            Day0802 = 0;
            Day0803 = 0;
            Day0804 = 0;
            Day0805 = 0;
            Day0901 = 0;
            Day0902 = 0;
            Day0903 = 0;
            Day0904 = 0;
            Day0905 = 0;
            Day1001 = 0;
            Day1002 = 0;
            Day1003 = 0;
            Day1004 = 0;
            Day1005 = 0;
            Day1101 = 0;
            Day1102 = 0;
            Day1103 = 0;
            Day1104 = 0;
            Day1105 = 0;
            Day1201 = 0;
            Day1202 = 0;
            Day1203 = 0;
            Day1204 = 0;
            Day1205 = 0;
            Day1301 = 0;
            Day1302 = 0;
            Day1303 = 0;
            Day1304 = 0;
            Day1305 = 0;
            Day1401 = 0;
            Day1402 = 0;
            Day1403 = 0;
            Day1404 = 0;
            Day1405 = 0;
            Day1501 = 0;
            Day1502 = 0;
            Day1503 = 0;
            Day1504 = 0;
            Day1505 = 0;
            Day1601 = 0;
            Day1602 = 0;
            Day1603 = 0;
            Day1604 = 0;
            Day1605 = 0;
            Day1701 = 0;
            Day1702 = 0;
            Day1703 = 0;
            Day1704 = 0;
            Day1705 = 0;
            Day1801 = 0;
            Day1802 = 0;
            Day1803 = 0;
            Day1804 = 0;
            Day1805 = 0;
            Day1901 = 0;
            Day1902 = 0;
            Day1903 = 0;
            Day1904 = 0;
            Day1905 = 0;
            Day2001 = 0;
            Day2002 = 0;
            Day2003 = 0;
            Day2004 = 0;
            Day2005 = 0;
            Day2101 = 0;
            Day2102 = 0;
            Day2103 = 0;
            Day2104 = 0;
            Day2105 = 0;
            Day2201 = 0;
            Day2202 = 0;
            Day2203 = 0;
            Day2204 = 0;
            Day2205 = 0;
            Day2301 = 0;
            Day2302 = 0;
            Day2303 = 0;
            Day2304 = 0;
            Day2305 = 0;
            Day2401 = 0;
            Day2402 = 0;
            Day2403 = 0;
            Day2404 = 0;
            Day2405 = 0;
            Day2501 = 0;
            Day2502 = 0;
            Day2503 = 0;
            Day2504 = 0;
            Day2505 = 0;
            Day2601 = 0;
            Day2602 = 0;
            Day2603 = 0;
            Day2604 = 0;
            Day2605 = 0;
            Day2701 = 0;
            Day2702 = 0;
            Day2703 = 0;
            Day2704 = 0;
            Day2705 = 0;
            Day2801 = 0;
            Day2802 = 0;
            Day2803 = 0;
            Day2804 = 0;
            Day2805 = 0;
            Day2901 = 0;
            Day2902 = 0;
            Day2903 = 0;
            Day2904 = 0;
            Day2905 = 0;
            Day3001 = 0;
            Day3002 = 0;
            Day3003 = 0;
            Day3004 = 0;
            Day3005 = 0;
            Day3101 = 0;
            Day3102 = 0;
            Day3103 = 0;
            Day3104 = 0;
            Day3105 = 0;
        }
    }

    // Station
    public class Station
    {

        ///<summary>
        /// 站点ID(用户组ID)
        ///</summary>
        public System.Guid StationID { get; set; } // StationID (Primary key)

        ///<summary>
        /// 站点饿了么ID
        ///</summary>
        public int StationEleID { get; set; } // StationEleID

        // Foreign keys

        /// <summary>
        /// Parent Group pointed by [Station].([StationID]) (FK_Station_Group)
        /// </summary>
        public virtual Group Group { get; set; } // FK_Station_Group
    }

    // User
    public class User
    {

        ///<summary>
        /// 用户组ID
        ///</summary>
        public System.Guid GroupID { get; set; } // GroupID
        public System.Guid? RoleID { get; set; } // RoleID

        ///<summary>
        /// 用户ID
        ///</summary>
        public int UserID { get; set; } // UserID (Primary key)

        ///<summary>
        /// 用户名
        ///</summary>
        public string Username { get; set; } // Username (length: 20)

        ///<summary>
        /// 显示名称
        ///</summary>
        public string DisplayName { get; set; } // DisplayName (length: 20)

        ///<summary>
        /// 真实姓名
        ///</summary>
        public string RealName { get; set; } // RealName (length: 20)

        ///<summary>
        /// 真实姓名是否验证
        ///</summary>
        public bool RealNameIsValid { get; set; } // RealNameIsValid

        ///<summary>
        /// 邮箱
        ///</summary>
        public string Email { get; set; } // Email (length: 100)

        ///<summary>
        /// 邮箱是否验证
        ///</summary>
        public bool EmailIsValid { get; set; } // EmailIsValid

        ///<summary>
        /// 手机号码
        ///</summary>
        public string Mobile { get; set; } // Mobile (length: 20)

        ///<summary>
        /// 手机号码是否验证
        ///</summary>
        public bool MobileIsValid { get; set; } // MobileIsValid

        ///<summary>
        /// 密码
        ///</summary>
        public string Password { get; set; } // Password (length: 100)

        ///<summary>
        /// 状态
        ///</summary>
        public UserStatus Status { get; set; } // Status

        ///<summary>
        /// 创建时间
        ///</summary>
        public System.DateTime CreationDate { get; set; } // CreationDate

        ///<summary>
        /// 头像
        ///</summary>
        public string HeadURL { get; set; } // HeadURL (length: 200)

        ///<summary>
        /// Logo
        ///</summary>
        public string LogoURL { get; set; } // LogoURL (length: 200)

        ///<summary>
        /// 描述
        ///</summary>
        public string Description { get; set; } // Description (length: 4000)

        ///<summary>
        /// 客户端代理
        ///</summary>
        public string ClientAgent { get; set; } // ClientAgent (length: 100)

        ///<summary>
        /// Token
        ///</summary>
        public string Token { get; set; } // Token (length: 50)

        ///<summary>
        /// 微信OpenID
        ///</summary>
        public string WXOpenID { get; set; } // WXOpenID (length: 50)

        ///<summary>
        /// 微信小程序OpenID
        ///</summary>
        public string WXAOpenID { get; set; } // WXAOpenID (length: 50)
        public byte[] RowVersion { get; private set; } // RowVersion (length: 8)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) User pointed by [Staff].[StaffID] (FK_Staff_User)
        /// </summary>
        public virtual Staff Staff { get; set; } // Staff.FK_Staff_User
        /// <summary>
        /// Child Permissions (Many-to-Many) mapped by table [UserPermissionRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Permission> Permissions { get; set; } // Many to many mapping
        /// <summary>
        /// Child Roles (Many-to-Many) mapped by table [UserRoleRelationship]
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Role> Roles { get; set; } // Many to many mapping

        // Foreign keys

        /// <summary>
        /// Parent Group pointed by [User].([GroupID]) (FK_User_Group)
        /// </summary>
        public virtual Group Group { get; set; } // FK_User_Group
        /// <summary>
        /// Parent Role pointed by [User].([RoleID]) (FK_User_Role)
        /// </summary>
        public virtual Role Role { get; set; } // FK_User_Role

        public User()
        {
            Permissions = new System.Collections.Generic.List<Permission>();
            Roles = new System.Collections.Generic.List<Role>();
        }
    }

    #endregion

    #region POCO Configuration

    // BankType
    public class BankTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<BankType>
    {
        public BankTypeConfiguration()
            : this("dbo")
        {
        }

        public BankTypeConfiguration(string schema)
        {
            ToTable("BankType", schema);
            HasKey(x => x.BankTypeID);

            Property(x => x.BankTypeID).HasColumnName(@"BankTypeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // Bulletin
    public class BulletinConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Bulletin>
    {
        public BulletinConfiguration()
            : this("dbo")
        {
        }

        public BulletinConfiguration(string schema)
        {
            ToTable("Bulletin", schema);
            HasKey(x => x.BulletinID);

            Property(x => x.BulletinID).HasColumnName(@"BulletinID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.IsShow).HasColumnName(@"IsShow").HasColumnType("bit").IsRequired();
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.Content).HasColumnName(@"Content").HasColumnType("nvarchar").IsRequired().HasMaxLength(2000);
            Property(x => x.PublishDate).HasColumnName(@"PublishDate").HasColumnType("datetime2").IsRequired();
        }
    }

    // Education
    public class EducationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Education>
    {
        public EducationConfiguration()
            : this("dbo")
        {
        }

        public EducationConfiguration(string schema)
        {
            ToTable("Education", schema);
            HasKey(x => x.EducationID);

            Property(x => x.EducationID).HasColumnName(@"EducationID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // ExitReason
    public class ExitReasonConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ExitReason>
    {
        public ExitReasonConfiguration()
            : this("dbo")
        {
        }

        public ExitReasonConfiguration(string schema)
        {
            ToTable("ExitReason", schema);
            HasKey(x => x.ExitReasonID);

            Property(x => x.ExitReasonID).HasColumnName(@"ExitReasonID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // Group
    public class GroupConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Group>
    {
        public GroupConfiguration()
            : this("dbo")
        {
        }

        public GroupConfiguration(string schema)
        {
            ToTable("Group", schema);
            HasKey(x => x.GroupID);

            Property(x => x.ParentID).HasColumnName(@"ParentID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.GroupID).HasColumnName(@"GroupID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("int").IsRequired();
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsIncludeUser).HasColumnName(@"IsIncludeUser").HasColumnType("bit").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
            Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            HasMany(t => t.Permissions).WithMany(t => t.Groups).Map(m =>
            {
                m.ToTable("GroupPermissionRelationship", "dbo");
                m.MapLeftKey("GroupID");
                m.MapRightKey("PermissionID");
            });
            HasMany(t => t.Role).WithMany(t => t.Group).Map(m =>
            {
                m.ToTable("GroupRoleLimit", "dbo");
                m.MapLeftKey("GroupID");
                m.MapRightKey("RoleID");
            });
            HasMany(t => t.RoleID).WithMany(t => t.GroupID).Map(m =>
            {
                m.ToTable("GroupRoleRelationship", "dbo");
                m.MapLeftKey("GroupID");
                m.MapRightKey("RoleID");
            });
        }
    }

    // GroupPolicy
    public class GroupPolicyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<GroupPolicy>
    {
        public GroupPolicyConfiguration()
            : this("dbo")
        {
        }

        public GroupPolicyConfiguration(string schema)
        {
            ToTable("GroupPolicy", schema);
            HasKey(x => new { x.GroupID, x.PolicyID });

            Property(x => x.GroupID).HasColumnName(@"GroupID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PolicyID).HasColumnName(@"PolicyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Group).WithMany(b => b.GroupPolicies).HasForeignKey(c => c.GroupID).WillCascadeOnDelete(false); // FK_GroupPolicy_Group
            HasRequired(a => a.Policy).WithMany(b => b.GroupPolicies).HasForeignKey(c => c.PolicyID); // FK_GroupPolicy_Policy
        }
    }

    // InsuranceNature
    public class InsuranceNatureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<InsuranceNature>
    {
        public InsuranceNatureConfiguration()
            : this("dbo")
        {
        }

        public InsuranceNatureConfiguration(string schema)
        {
            ToTable("InsuranceNature", schema);
            HasKey(x => x.InsuranceNatureID);

            Property(x => x.InsuranceNatureID).HasColumnName(@"InsuranceNatureID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // JobNature
    public class JobNatureConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<JobNature>
    {
        public JobNatureConfiguration()
            : this("dbo")
        {
        }

        public JobNatureConfiguration(string schema)
        {
            ToTable("JobNature", schema);
            HasKey(x => x.JobNatureID);

            Property(x => x.JobNatureID).HasColumnName(@"JobNatureID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // Log
    public class LogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Log>
    {
        public LogConfiguration()
            : this("dbo")
        {
        }

        public LogConfiguration(string schema)
        {
            ToTable("Log", schema);
            HasKey(x => x.LogID);

            Property(x => x.LogID).HasColumnName(@"LogID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            Property(x => x.TypeID).HasColumnName(@"TypeID").HasColumnType("int").IsRequired();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.IP).HasColumnName(@"IP").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime2").IsRequired();
        }
    }

    // MobileValidationCode
    public class MobileValidationCodeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MobileValidationCode>
    {
        public MobileValidationCodeConfiguration()
            : this("dbo")
        {
        }

        public MobileValidationCodeConfiguration(string schema)
        {
            ToTable("MobileValidationCode", schema);
            HasKey(x => x.Mobile);

            Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar").IsRequired().HasMaxLength(20).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValidationCode).HasColumnName(@"ValidationCode").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.TypeID).HasColumnName(@"TypeID").HasColumnType("int").IsRequired();
            Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.ExpirationDate).HasColumnName(@"ExpirationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.FinishVerifyDate).HasColumnName(@"FinishVerifyDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.VerifyTimes).HasColumnName(@"VerifyTimes").HasColumnType("int").IsRequired();
            Property(x => x.MaxVerifyTimes).HasColumnName(@"MaxVerifyTimes").HasColumnType("int").IsRequired();
        }
    }

    // Permission
    public class PermissionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Permission>
    {
        public PermissionConfiguration()
            : this("dbo")
        {
        }

        public PermissionConfiguration(string schema)
        {
            ToTable("Permission", schema);
            HasKey(x => x.PermissionID);

            Property(x => x.ParentID).HasColumnName(@"ParentID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.PermissionID).HasColumnName(@"PermissionID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModuleName).HasColumnName(@"ModuleName").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Level).HasColumnName(@"Level").HasColumnType("int").IsRequired();
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            HasMany(t => t.Roles).WithMany(t => t.Permissions).Map(m =>
            {
                m.ToTable("RolePermissionRelationship", "dbo");
                m.MapLeftKey("PermissionID");
                m.MapRightKey("RoleID");
            });
            HasMany(t => t.Users).WithMany(t => t.Permissions).Map(m =>
            {
                m.ToTable("UserPermissionRelationship", "dbo");
                m.MapLeftKey("PermissionID");
                m.MapRightKey("UserID");
            });
        }
    }

    // Policy
    public class PolicyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Policy>
    {
        public PolicyConfiguration()
            : this("dbo")
        {
        }

        public PolicyConfiguration(string schema)
        {
            ToTable("Policy", schema);
            HasKey(x => x.PolicyID);

            Property(x => x.PolicyID).HasColumnName(@"PolicyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Remark).HasColumnName(@"Remark").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
        }
    }

    // ProtocolTime
    public class ProtocolTimeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProtocolTime>
    {
        public ProtocolTimeConfiguration()
            : this("dbo")
        {
        }

        public ProtocolTimeConfiguration(string schema)
        {
            ToTable("ProtocolTime", schema);
            HasKey(x => x.ProtocolTimeID);

            Property(x => x.ProtocolTimeID).HasColumnName(@"ProtocolTimeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // ProtocolType
    public class ProtocolTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ProtocolType>
    {
        public ProtocolTypeConfiguration()
            : this("dbo")
        {
        }

        public ProtocolTypeConfiguration(string schema)
        {
            ToTable("ProtocolType", schema);
            HasKey(x => x.ProtocolTypeID);

            Property(x => x.ProtocolTypeID).HasColumnName(@"ProtocolTypeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // RecruitChannel
    public class RecruitChannelConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RecruitChannel>
    {
        public RecruitChannelConfiguration()
            : this("dbo")
        {
        }

        public RecruitChannelConfiguration(string schema)
        {
            ToTable("RecruitChannel", schema);
            HasKey(x => x.RecruitChannelID);

            Property(x => x.RecruitChannelID).HasColumnName(@"RecruitChannelID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // RiderJobType
    public class RiderJobTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<RiderJobType>
    {
        public RiderJobTypeConfiguration()
            : this("dbo")
        {
        }

        public RiderJobTypeConfiguration(string schema)
        {
            ToTable("RiderJobType", schema);
            HasKey(x => x.RiderJobTypeID);

            Property(x => x.RiderJobTypeID).HasColumnName(@"RiderJobTypeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsDisabled).HasColumnName(@"IsDisabled").HasColumnType("bit").IsRequired();
        }
    }

    // Role
    public class RoleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Role>
    {
        public RoleConfiguration()
            : this("dbo")
        {
        }

        public RoleConfiguration(string schema)
        {
            ToTable("Role", schema);
            HasKey(x => x.RoleID);

            Property(x => x.RoleID).HasColumnName(@"RoleID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
            Property(x => x.IsSystem).HasColumnName(@"IsSystem").HasColumnType("bit").IsRequired();
            HasMany(t => t.User).WithMany(t => t.Roles).Map(m =>
            {
                m.ToTable("UserRoleRelationship", "dbo");
                m.MapLeftKey("RoleID");
                m.MapRightKey("UserID");
            });
        }
    }

    // Site
    public class SiteConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Site>
    {
        public SiteConfiguration()
            : this("dbo")
        {
        }

        public SiteConfiguration(string schema)
        {
            ToTable("Site", schema);
            HasKey(x => x.SiteID);

            Property(x => x.SiteID).HasColumnName(@"SiteID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.Host).HasColumnName(@"Host").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.Keywords).HasColumnName(@"Keywords").HasColumnType("nvarchar").IsRequired().HasMaxLength(200);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsRequired().HasMaxLength(500);
            Property(x => x.Copyright).HasColumnName(@"Copyright").HasColumnType("nvarchar").IsRequired().HasMaxLength(1000);
            Property(x => x.FaviconURL).HasColumnName(@"FaviconURL").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.PageTitleSeparator).HasColumnName(@"PageTitleSeparator").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
        }
    }

    // Staff
    public class StaffConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Staff>
    {
        public StaffConfiguration()
            : this("dbo")
        {
        }

        public StaffConfiguration(string schema)
        {
            ToTable("Staff", schema);
            HasKey(x => x.StaffID);

            Property(x => x.StaffID).HasColumnName(@"StaffID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.Sex).HasColumnName(@"Sex").HasColumnType("int").IsOptional();
            Property(x => x.Age).HasColumnName(@"Age").HasColumnType("int").IsOptional();
            Property(x => x.Birthday).HasColumnName(@"Birthday").HasColumnType("datetime2").IsOptional();
            Property(x => x.StaffMobile).HasColumnName(@"StaffMobile").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.MaritalStatus).HasColumnName(@"MaritalStatus").HasColumnType("int").IsOptional();
            Property(x => x.IDCardNO).HasColumnName(@"IDCardNO").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.EducationID).HasColumnName(@"EducationID").HasColumnType("int").IsOptional();
            Property(x => x.School).HasColumnName(@"School").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Major).HasColumnName(@"Major").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Household).HasColumnName(@"Household").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.Residence).HasColumnName(@"Residence").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.EmergencyContact).HasColumnName(@"EmergencyContact").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.EmergencyContactRelationship).HasColumnName(@"EmergencyContactRelationship").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.EmergencyContactMobile).HasColumnName(@"EmergencyContactMobile").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.RecruitChannelID).HasColumnName(@"RecruitChannelID").HasColumnType("int").IsOptional();
            Property(x => x.RiderReferrerAwardsProvideTime).HasColumnName(@"RiderReferrerAwardsProvideTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.RiderReferrerStaffID).HasColumnName(@"RiderReferrerStaffID").HasColumnType("int").IsOptional();
            Property(x => x.RiderReferrerDate).HasColumnName(@"RiderReferrerDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.RiderReferrerRemark).HasColumnName(@"RiderReferrerRemark").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.RiderReferrerAttachmentURL).HasColumnName(@"RiderReferrerAttachmentURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.StaffStatusID).HasColumnName(@"StaffStatusID").HasColumnType("int").IsRequired();
            Property(x => x.IsInBlackList).HasColumnName(@"IsInBlackList").HasColumnType("bit").IsRequired();
            Property(x => x.InBlackListRemark).HasColumnName(@"InBlackListRemark").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.JobNatureID).HasColumnName(@"JobNatureID").HasColumnType("int").IsOptional();
            Property(x => x.ProtocolNO).HasColumnName(@"ProtocolNO").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.ProtocolTimeID).HasColumnName(@"ProtocolTimeID").HasColumnType("int").IsOptional();
            Property(x => x.ProtocolTypeID).HasColumnName(@"ProtocolTypeID").HasColumnType("int").IsOptional();
            Property(x => x.ProtocolSignedDate).HasColumnName(@"ProtocolSignedDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.ProtocolBeginDate).HasColumnName(@"ProtocolBeginDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.ProtocolEndDate).HasColumnName(@"ProtocolEndDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.InsuranceNatureID).HasColumnName(@"InsuranceNatureID").HasColumnType("int").IsOptional();
            Property(x => x.InsuranceStartBuyDate).HasColumnName(@"InsuranceStartBuyDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.InsuranceStopBuyDate).HasColumnName(@"InsuranceStopBuyDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.EntryDate).HasColumnName(@"EntryDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.EntryRemark).HasColumnName(@"EntryRemark").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.ExitDate).HasColumnName(@"ExitDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.ExitReasonID).HasColumnName(@"ExitReasonID").HasColumnType("int").IsOptional();
            Property(x => x.ExitRemark).HasColumnName(@"ExitRemark").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.BankTypeID).HasColumnName(@"BankTypeID").HasColumnType("int").IsOptional();
            Property(x => x.BankNO).HasColumnName(@"BankNO").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.WorkNO).HasColumnName(@"WorkNO").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.RiderJobTypeID).HasColumnName(@"RiderJobTypeID").HasColumnType("int").IsOptional();
            Property(x => x.RiderEleID).HasColumnName(@"RiderEleID").HasColumnType("int").IsOptional();
            Property(x => x.RiderFirstWorkDate).HasColumnName(@"RiderFirstWorkDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.RiderLastWorkDate).HasColumnName(@"RiderLastWorkDate").HasColumnType("datetime2").IsOptional();
            Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasOptional(a => a.BankType).WithMany(b => b.Staffs).HasForeignKey(c => c.BankTypeID).WillCascadeOnDelete(false); // FK_Staff_BankType
            HasOptional(a => a.Education).WithMany(b => b.Staffs).HasForeignKey(c => c.EducationID).WillCascadeOnDelete(false); // FK_Staff_Education
            HasOptional(a => a.ExitReason).WithMany(b => b.Staffs).HasForeignKey(c => c.ExitReasonID).WillCascadeOnDelete(false); // FK_Staff_ExitReason
            HasOptional(a => a.InsuranceNature).WithMany(b => b.Staffs).HasForeignKey(c => c.InsuranceNatureID).WillCascadeOnDelete(false); // FK_Staff_InsuranceNature
            HasOptional(a => a.JobNature).WithMany(b => b.Staffs).HasForeignKey(c => c.JobNatureID).WillCascadeOnDelete(false); // FK_Staff_JobNature
            HasOptional(a => a.ProtocolTime).WithMany(b => b.Staffs).HasForeignKey(c => c.ProtocolTimeID).WillCascadeOnDelete(false); // FK_Staff_ProtocolTime
            HasOptional(a => a.ProtocolType).WithMany(b => b.Staffs).HasForeignKey(c => c.ProtocolTypeID).WillCascadeOnDelete(false); // FK_Staff_ProtocolType
            HasOptional(a => a.RecruitChannel).WithMany(b => b.Staffs).HasForeignKey(c => c.RecruitChannelID).WillCascadeOnDelete(false); // FK_Staff_RecruitChannel
            HasOptional(a => a.RiderJobType).WithMany(b => b.Staffs).HasForeignKey(c => c.RiderJobTypeID).WillCascadeOnDelete(false); // FK_Staff_RiderJobType
            HasOptional(a => a.RiderReferrerStaff).WithMany(b => b.Staffs).HasForeignKey(c => c.RiderReferrerStaffID).WillCascadeOnDelete(false); // FK_Staff_Staff
            HasRequired(a => a.StaffStatu).WithMany(b => b.Staffs).HasForeignKey(c => c.StaffStatusID).WillCascadeOnDelete(false); // FK_Staff_StaffStatus
            HasRequired(a => a.User).WithOptional(b => b.Staff).WillCascadeOnDelete(false); // FK_Staff_User
        }
    }

    // StaffLeave
    public class StaffLeaveConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLeave>
    {
        public StaffLeaveConfiguration()
            : this("dbo")
        {
        }

        public StaffLeaveConfiguration(string schema)
        {
            ToTable("StaffLeave", schema);
            HasKey(x => x.StaffLeaveID);

            Property(x => x.StaffLeaveID).HasColumnName(@"StaffLeaveID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StaffLeaveTypeID).HasColumnName(@"StaffLeaveTypeID").HasColumnType("int").IsRequired();
            Property(x => x.RequestStaffID).HasColumnName(@"RequestStaffID").HasColumnType("int").IsRequired();
            Property(x => x.TargetStaffID).HasColumnName(@"TargetStaffID").HasColumnType("int").IsRequired();
            Property(x => x.HalfDays).HasColumnName(@"HalfDays").HasColumnType("int").IsRequired();
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.BeginDatePartial).HasColumnName(@"BeginDatePartial").HasColumnType("int").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.EndDatePartial).HasColumnName(@"EndDatePartial").HasColumnType("int").IsRequired();
            Property(x => x.RequestRemark).HasColumnName(@"RequestRemark").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.RequestAttachmentURL1).HasColumnName(@"RequestAttachmentURL1").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.RequestAttachmentURL2).HasColumnName(@"RequestAttachmentURL2").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.RequestAttachment1UploadTime).HasColumnName(@"RequestAttachment1UploadTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.RequestAttachment2UploadTime).HasColumnName(@"RequestAttachment2UploadTime").HasColumnType("datetime2").IsOptional();
            Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.AuditStatus).HasColumnName(@"AuditStatus").HasColumnType("int").IsRequired();
            Property(x => x.AuditStaffLevelCurrent).HasColumnName(@"AuditStaffLevelCurrent").HasColumnType("int").IsRequired();
            Property(x => x.AuditStaffLevelMax).HasColumnName(@"AuditStaffLevelMax").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID1).HasColumnName(@"AuditStaffID1").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID2).HasColumnName(@"AuditStaffID2").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID3).HasColumnName(@"AuditStaffID3").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID4).HasColumnName(@"AuditStaffID4").HasColumnType("int").IsOptional();
            Property(x => x.AuditDate1).HasColumnName(@"AuditDate1").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditDate2).HasColumnName(@"AuditDate2").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditDate3).HasColumnName(@"AuditDate3").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditDate4).HasColumnName(@"AuditDate4").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditRemark1).HasColumnName(@"AuditRemark1").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.AuditRemark2).HasColumnName(@"AuditRemark2").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.AuditRemark3).HasColumnName(@"AuditRemark3").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.AuditRemark4).HasColumnName(@"AuditRemark4").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasOptional(a => a.Staff_AuditStaffID1).WithMany(b => b.AuditStaffID1).HasForeignKey(c => c.AuditStaffID1).WillCascadeOnDelete(false); // FK_StaffLeave_Staff_AuditStaffID1
            HasOptional(a => a.Staff_AuditStaffID2).WithMany(b => b.StaffLeaves_AuditStaffID2).HasForeignKey(c => c.AuditStaffID2).WillCascadeOnDelete(false); // FK_StaffLeave_Staff_AuditStaffID2
            HasOptional(a => a.Staff_AuditStaffID3).WithMany(b => b.StaffLeaves_AuditStaffID3).HasForeignKey(c => c.AuditStaffID3).WillCascadeOnDelete(false); // FK_StaffLeave_Staff_AuditStaffID3
            HasOptional(a => a.Staff_AuditStaffID4).WithMany(b => b.StaffLeaves_AuditStaffID4).HasForeignKey(c => c.AuditStaffID4).WillCascadeOnDelete(false); // FK_StaffLeave_Staff_AuditStaffID4
            HasRequired(a => a.RequestStaff).WithMany(b => b.RequestStaffID).HasForeignKey(c => c.RequestStaffID).WillCascadeOnDelete(false); // FK_StaffLeave_Staff_RequestStaffID
            HasRequired(a => a.StaffLeaveType).WithMany(b => b.StaffLeaves).HasForeignKey(c => c.StaffLeaveTypeID).WillCascadeOnDelete(false); // FK_StaffLeave_StaffLeaveType
            HasRequired(a => a.TargetStaff).WithMany(b => b.TargetStaffID).HasForeignKey(c => c.TargetStaffID).WillCascadeOnDelete(false); // FK_StaffLeave_Staff_TargetStaffID
        }
    }

    // StaffLeaveAuditFlow
    public class StaffLeaveAuditFlowConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLeaveAuditFlow>
    {
        public StaffLeaveAuditFlowConfiguration()
            : this("dbo")
        {
        }

        public StaffLeaveAuditFlowConfiguration(string schema)
        {
            ToTable("StaffLeaveAuditFlow", schema);
            HasKey(x => x.StaffLeaveAuditFlowID);

            Property(x => x.StaffLeaveAuditFlowID).HasColumnName(@"StaffLeaveAuditFlowID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequestRoleID).HasColumnName(@"RequestRoleID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AuditGroupID1).HasColumnName(@"AuditGroupID1").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditGroupID2).HasColumnName(@"AuditGroupID2").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditGroupID3).HasColumnName(@"AuditGroupID3").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditGroupID4).HasColumnName(@"AuditGroupID4").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID1).HasColumnName(@"AuditRoleID1").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID2).HasColumnName(@"AuditRoleID2").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID3).HasColumnName(@"AuditRoleID3").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID4).HasColumnName(@"AuditRoleID4").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditStaffLevelMaxDays1).HasColumnName(@"AuditStaffLevelMaxDays1").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffLevelMaxDays2).HasColumnName(@"AuditStaffLevelMaxDays2").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffLevelMaxDays3).HasColumnName(@"AuditStaffLevelMaxDays3").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffLevelMaxDays4).HasColumnName(@"AuditStaffLevelMaxDays4").HasColumnType("int").IsOptional();

            // Foreign keys
            HasOptional(a => a.Group_AuditGroupID1).WithMany(b => b.AuditGroupID1).HasForeignKey(c => c.AuditGroupID1).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Group_AuditGroupID1
            HasOptional(a => a.Group_AuditGroupID2).WithMany(b => b.StaffLeaveAuditFlows_AuditGroupID2).HasForeignKey(c => c.AuditGroupID2).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Group_AuditGroupID2
            HasOptional(a => a.Group_AuditGroupID3).WithMany(b => b.StaffLeaveAuditFlows_AuditGroupID3).HasForeignKey(c => c.AuditGroupID3).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Group_AuditGroupID3
            HasOptional(a => a.Group_AuditGroupID4).WithMany(b => b.StaffLeaveAuditFlows_AuditGroupID4).HasForeignKey(c => c.AuditGroupID4).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Group_AuditGroupID4
            HasOptional(a => a.Role_AuditRoleID1).WithMany(b => b.AuditRoleID1).HasForeignKey(c => c.AuditRoleID1).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Role_AuditRoleID1
            HasOptional(a => a.Role_AuditRoleID2).WithMany(b => b.StaffLeaveAuditFlows_AuditRoleID2).HasForeignKey(c => c.AuditRoleID2).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Role_AuditRoleID2
            HasOptional(a => a.Role_AuditRoleID3).WithMany(b => b.StaffLeaveAuditFlows_AuditRoleID3).HasForeignKey(c => c.AuditRoleID3).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Role_AuditRoleID3
            HasOptional(a => a.Role_AuditRoleID4).WithMany(b => b.StaffLeaveAuditFlows_AuditRoleID4).HasForeignKey(c => c.AuditRoleID4).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Role_AuditRoleID4
            HasRequired(a => a.Group_StaffLeaveAuditFlowID).WithOptional(b => b.StaffLeaveAuditFlow); // FK_StaffLeaveAuditFlow_Group
            HasRequired(a => a.RequestRole).WithMany(b => b.RequestRoleID).HasForeignKey(c => c.RequestRoleID).WillCascadeOnDelete(false); // FK_StaffLeaveAuditFlow_Role_RequestRoleID
        }
    }

    // StaffLeaveType
    public class StaffLeaveTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffLeaveType>
    {
        public StaffLeaveTypeConfiguration()
            : this("dbo")
        {
        }

        public StaffLeaveTypeConfiguration(string schema)
        {
            ToTable("StaffLeaveType", schema);
            HasKey(x => x.StaffLeaveTypeID);

            Property(x => x.StaffLeaveTypeID).HasColumnName(@"StaffLeaveTypeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
        }
    }

    // StaffPolicy
    public class StaffPolicyConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffPolicy>
    {
        public StaffPolicyConfiguration()
            : this("dbo")
        {
        }

        public StaffPolicyConfiguration(string schema)
        {
            ToTable("StaffPolicy", schema);
            HasKey(x => new { x.StaffID, x.PolicyID });

            Property(x => x.StaffID).HasColumnName(@"StaffID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.PolicyID).HasColumnName(@"PolicyID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.BeginDate).HasColumnName(@"BeginDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.EndDate).HasColumnName(@"EndDate").HasColumnType("datetime2").IsRequired();

            // Foreign keys
            HasRequired(a => a.Policy).WithMany(b => b.StaffPolicies).HasForeignKey(c => c.PolicyID).WillCascadeOnDelete(false); // FK_StaffPolicy_Policy
            HasRequired(a => a.Staff).WithMany(b => b.StaffPolicies).HasForeignKey(c => c.StaffID).WillCascadeOnDelete(false); // FK_StaffPolicy_Staff
        }
    }

    // StaffStatus
    public class StaffStatuConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffStatu>
    {
        public StaffStatuConfiguration()
            : this("dbo")
        {
        }

        public StaffStatuConfiguration(string schema)
        {
            ToTable("StaffStatus", schema);
            HasKey(x => x.StaffStatusID);

            Property(x => x.StaffStatusID).HasColumnName(@"StaffStatusID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
        }
    }

    // StaffTurnover
    public class StaffTurnoverConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffTurnover>
    {
        public StaffTurnoverConfiguration()
            : this("dbo")
        {
        }

        public StaffTurnoverConfiguration(string schema)
        {
            ToTable("StaffTurnover", schema);
            HasKey(x => x.StaffTurnoverID);

            Property(x => x.StaffTurnoverID).HasColumnName(@"StaffTurnoverID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StaffTurnoverTypeID).HasColumnName(@"StaffTurnoverTypeID").HasColumnType("int").IsRequired();
            Property(x => x.RequestStaffID).HasColumnName(@"RequestStaffID").HasColumnType("int").IsRequired();
            Property(x => x.TargetStaffID).HasColumnName(@"TargetStaffID").HasColumnType("int").IsRequired();
            Property(x => x.FromGroupID).HasColumnName(@"FromGroupID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.FromRoleID).HasColumnName(@"FromRoleID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.FromRiderJobTypeID).HasColumnName(@"FromRiderJobTypeID").HasColumnType("int").IsOptional();
            Property(x => x.ToGroupID).HasColumnName(@"ToGroupID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ToRoleID).HasColumnName(@"ToRoleID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ToRiderJobTypeID).HasColumnName(@"ToRiderJobTypeID").HasColumnType("int").IsOptional();
            Property(x => x.RequestRemark).HasColumnName(@"RequestRemark").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.EffectiveDate).HasColumnName(@"EffectiveDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.AuditStatus).HasColumnName(@"AuditStatus").HasColumnType("int").IsRequired();
            Property(x => x.AuditStaffLevelCurrent).HasColumnName(@"AuditStaffLevelCurrent").HasColumnType("int").IsRequired();
            Property(x => x.AuditStaffLevelMax).HasColumnName(@"AuditStaffLevelMax").HasColumnType("int").IsRequired();
            Property(x => x.AuditStaffID1).HasColumnName(@"AuditStaffID1").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID2).HasColumnName(@"AuditStaffID2").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID3).HasColumnName(@"AuditStaffID3").HasColumnType("int").IsOptional();
            Property(x => x.AuditStaffID4).HasColumnName(@"AuditStaffID4").HasColumnType("int").IsOptional();
            Property(x => x.AuditDate1).HasColumnName(@"AuditDate1").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditDate2).HasColumnName(@"AuditDate2").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditDate3).HasColumnName(@"AuditDate3").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditDate4).HasColumnName(@"AuditDate4").HasColumnType("datetime2").IsOptional();
            Property(x => x.AuditRemark1).HasColumnName(@"AuditRemark1").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.AuditRemark2).HasColumnName(@"AuditRemark2").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.AuditRemark3).HasColumnName(@"AuditRemark3").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.AuditRemark4).HasColumnName(@"AuditRemark4").HasColumnType("nvarchar").IsOptional().HasMaxLength(1000);
            Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasOptional(a => a.FromGroup).WithMany(b => b.FromGroup).HasForeignKey(c => c.FromGroupID).WillCascadeOnDelete(false); // FK_StaffTurnover_Group_FromGroupID
            HasOptional(a => a.FromRiderJobType).WithMany(b => b.FromRiderJobType).HasForeignKey(c => c.FromRiderJobTypeID).WillCascadeOnDelete(false); // FK_StaffTurnover_RiderJobType_FromRiderJobTypeID
            HasOptional(a => a.FromRole).WithMany(b => b.FromRole).HasForeignKey(c => c.FromRoleID).WillCascadeOnDelete(false); // FK_StaffTurnover_Role_FromRoleID
            HasOptional(a => a.Staff_AuditStaffID1).WithMany(b => b.StaffTurnovers_AuditStaffID1).HasForeignKey(c => c.AuditStaffID1).WillCascadeOnDelete(false); // FK_StaffTurnoverLog_Staff_AuditStaffID1
            HasOptional(a => a.Staff_AuditStaffID2).WithMany(b => b.StaffTurnovers_AuditStaffID2).HasForeignKey(c => c.AuditStaffID2).WillCascadeOnDelete(false); // FK_StaffTurnoverLog_Staff_AuditStaffID2
            HasOptional(a => a.Staff_AuditStaffID3).WithMany(b => b.StaffTurnovers_AuditStaffID3).HasForeignKey(c => c.AuditStaffID3).WillCascadeOnDelete(false); // FK_StaffTurnoverLog_Staff_AuditStaffID3
            HasOptional(a => a.Staff_AuditStaffID4).WithMany(b => b.StaffTurnovers_AuditStaffID4).HasForeignKey(c => c.AuditStaffID4).WillCascadeOnDelete(false); // FK_StaffTurnoverLog_Staff_AuditStaffID4
            HasOptional(a => a.ToGroup).WithMany(b => b.ToGroup).HasForeignKey(c => c.ToGroupID).WillCascadeOnDelete(false); // FK_StaffTurnover_Group_ToGroupID
            HasOptional(a => a.ToRiderJobType).WithMany(b => b.ToRiderJobType).HasForeignKey(c => c.ToRiderJobTypeID).WillCascadeOnDelete(false); // FK_StaffTurnover_RiderJobType_ToRiderJobTypeID
            HasOptional(a => a.ToRole).WithMany(b => b.ToRole).HasForeignKey(c => c.ToRoleID).WillCascadeOnDelete(false); // FK_StaffTurnover_Role_ToRoleID
            HasRequired(a => a.RequestStaff).WithMany(b => b.StaffTurnovers_RequestStaffID).HasForeignKey(c => c.RequestStaffID).WillCascadeOnDelete(false); // FK_StaffTurnoverLog_Staff_RequestStaffID
            HasRequired(a => a.StaffTurnoverType).WithMany(b => b.StaffTurnovers).HasForeignKey(c => c.StaffTurnoverTypeID).WillCascadeOnDelete(false); // FK_StaffTurnover_StaffTurnoverType
            HasRequired(a => a.TargetStaff).WithMany(b => b.StaffTurnovers_TargetStaffID).HasForeignKey(c => c.TargetStaffID).WillCascadeOnDelete(false); // FK_StaffTurnoverLog_Staff_TargetStaffID
        }
    }

    // StaffTurnoverFlow
    public class StaffTurnoverFlowConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffTurnoverFlow>
    {
        public StaffTurnoverFlowConfiguration()
            : this("dbo")
        {
        }

        public StaffTurnoverFlowConfiguration(string schema)
        {
            ToTable("StaffTurnoverFlow", schema);
            HasKey(x => x.StaffTurnoverAuditFlowID);

            Property(x => x.StaffTurnoverAuditFlowID).HasColumnName(@"StaffTurnoverAuditFlowID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RequestRoleID).HasColumnName(@"RequestRoleID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.AuditGroupID1).HasColumnName(@"AuditGroupID1").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditGroupID2).HasColumnName(@"AuditGroupID2").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditGroupID3).HasColumnName(@"AuditGroupID3").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditGroupID4).HasColumnName(@"AuditGroupID4").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID1).HasColumnName(@"AuditRoleID1").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID2).HasColumnName(@"AuditRoleID2").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID3).HasColumnName(@"AuditRoleID3").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.AuditRoleID4).HasColumnName(@"AuditRoleID4").HasColumnType("uniqueidentifier").IsOptional();

            // Foreign keys
            HasOptional(a => a.Group_AuditGroupID1).WithMany(b => b.StaffTurnoverFlows_AuditGroupID1).HasForeignKey(c => c.AuditGroupID1).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Group_AuditGroupID1
            HasOptional(a => a.Group_AuditGroupID2).WithMany(b => b.StaffTurnoverFlows_AuditGroupID2).HasForeignKey(c => c.AuditGroupID2).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Group_AuditGroupID2
            HasOptional(a => a.Group_AuditGroupID3).WithMany(b => b.StaffTurnoverFlows_AuditGroupID3).HasForeignKey(c => c.AuditGroupID3).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Group_AuditGroupID3
            HasOptional(a => a.Group_AuditGroupID4).WithMany(b => b.StaffTurnoverFlows_AuditGroupID4).HasForeignKey(c => c.AuditGroupID4).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Group_AuditGroupID4
            HasOptional(a => a.Role_AuditRoleID1).WithMany(b => b.StaffTurnoverFlows_AuditRoleID1).HasForeignKey(c => c.AuditRoleID1).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Role_AuditRoleID1
            HasOptional(a => a.Role_AuditRoleID2).WithMany(b => b.StaffTurnoverFlows_AuditRoleID2).HasForeignKey(c => c.AuditRoleID2).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Role_AuditRoleID2
            HasOptional(a => a.Role_AuditRoleID3).WithMany(b => b.StaffTurnoverFlows_AuditRoleID3).HasForeignKey(c => c.AuditRoleID3).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Role_AuditRoleID3
            HasOptional(a => a.Role_AuditRoleID4).WithMany(b => b.StaffTurnoverFlows_AuditRoleID4).HasForeignKey(c => c.AuditRoleID4).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Role_AuditRoleID4
            HasRequired(a => a.RequestRole).WithMany(b => b.StaffTurnoverFlows_RequestRoleID).HasForeignKey(c => c.RequestRoleID).WillCascadeOnDelete(false); // FK_StaffTurnoverFlow_Role_RequestRoleID
            HasRequired(a => a.StaffTurnoverAuditFlow).WithOptional(b => b.StaffTurnoverFlow); // FK_StaffTurnoverFlow_Group
        }
    }

    // StaffTurnoverType
    public class StaffTurnoverTypeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffTurnoverType>
    {
        public StaffTurnoverTypeConfiguration()
            : this("dbo")
        {
        }

        public StaffTurnoverTypeConfiguration(string schema)
        {
            ToTable("StaffTurnoverType", schema);
            HasKey(x => x.StaffTurnoverTypeID);

            Property(x => x.StaffTurnoverTypeID).HasColumnName(@"StaffTurnoverTypeID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayOrder).HasColumnName(@"DisplayOrder").HasColumnType("int").IsRequired();
        }
    }

    // StaffWork
    public class StaffWorkConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<StaffWork>
    {
        public StaffWorkConfiguration()
            : this("dbo")
        {
        }

        public StaffWorkConfiguration(string schema)
        {
            ToTable("StaffWork", schema);
            HasKey(x => new { x.StaffID, x.Year, x.Month });

            Property(x => x.StaffID).HasColumnName(@"StaffID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Year).HasColumnName(@"Year").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Month).HasColumnName(@"Month").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Day0101).HasColumnName(@"Day0101").HasColumnType("int").IsRequired();
            Property(x => x.Day0102).HasColumnName(@"Day0102").HasColumnType("int").IsRequired();
            Property(x => x.Day0103).HasColumnName(@"Day0103").HasColumnType("int").IsRequired();
            Property(x => x.Day0104).HasColumnName(@"Day0104").HasColumnType("int").IsRequired();
            Property(x => x.Day0105).HasColumnName(@"Day0105").HasColumnType("int").IsRequired();
            Property(x => x.Day0201).HasColumnName(@"Day0201").HasColumnType("int").IsRequired();
            Property(x => x.Day0202).HasColumnName(@"Day0202").HasColumnType("int").IsRequired();
            Property(x => x.Day0203).HasColumnName(@"Day0203").HasColumnType("int").IsRequired();
            Property(x => x.Day0204).HasColumnName(@"Day0204").HasColumnType("int").IsRequired();
            Property(x => x.Day0205).HasColumnName(@"Day0205").HasColumnType("int").IsRequired();
            Property(x => x.Day0301).HasColumnName(@"Day0301").HasColumnType("int").IsRequired();
            Property(x => x.Day0302).HasColumnName(@"Day0302").HasColumnType("int").IsRequired();
            Property(x => x.Day0303).HasColumnName(@"Day0303").HasColumnType("int").IsRequired();
            Property(x => x.Day0304).HasColumnName(@"Day0304").HasColumnType("int").IsRequired();
            Property(x => x.Day0305).HasColumnName(@"Day0305").HasColumnType("int").IsRequired();
            Property(x => x.Day0401).HasColumnName(@"Day0401").HasColumnType("int").IsRequired();
            Property(x => x.Day0402).HasColumnName(@"Day0402").HasColumnType("int").IsRequired();
            Property(x => x.Day0403).HasColumnName(@"Day0403").HasColumnType("int").IsRequired();
            Property(x => x.Day0404).HasColumnName(@"Day0404").HasColumnType("int").IsRequired();
            Property(x => x.Day0405).HasColumnName(@"Day0405").HasColumnType("int").IsRequired();
            Property(x => x.Day0501).HasColumnName(@"Day0501").HasColumnType("int").IsRequired();
            Property(x => x.Day0502).HasColumnName(@"Day0502").HasColumnType("int").IsRequired();
            Property(x => x.Day0503).HasColumnName(@"Day0503").HasColumnType("int").IsRequired();
            Property(x => x.Day0504).HasColumnName(@"Day0504").HasColumnType("int").IsRequired();
            Property(x => x.Day0505).HasColumnName(@"Day0505").HasColumnType("int").IsRequired();
            Property(x => x.Day0601).HasColumnName(@"Day0601").HasColumnType("int").IsRequired();
            Property(x => x.Day0602).HasColumnName(@"Day0602").HasColumnType("int").IsRequired();
            Property(x => x.Day0603).HasColumnName(@"Day0603").HasColumnType("int").IsRequired();
            Property(x => x.Day0604).HasColumnName(@"Day0604").HasColumnType("int").IsRequired();
            Property(x => x.Day0605).HasColumnName(@"Day0605").HasColumnType("int").IsRequired();
            Property(x => x.Day0701).HasColumnName(@"Day0701").HasColumnType("int").IsRequired();
            Property(x => x.Day0702).HasColumnName(@"Day0702").HasColumnType("int").IsRequired();
            Property(x => x.Day0703).HasColumnName(@"Day0703").HasColumnType("int").IsRequired();
            Property(x => x.Day0704).HasColumnName(@"Day0704").HasColumnType("int").IsRequired();
            Property(x => x.Day0705).HasColumnName(@"Day0705").HasColumnType("int").IsRequired();
            Property(x => x.Day0801).HasColumnName(@"Day0801").HasColumnType("int").IsRequired();
            Property(x => x.Day0802).HasColumnName(@"Day0802").HasColumnType("int").IsRequired();
            Property(x => x.Day0803).HasColumnName(@"Day0803").HasColumnType("int").IsRequired();
            Property(x => x.Day0804).HasColumnName(@"Day0804").HasColumnType("int").IsRequired();
            Property(x => x.Day0805).HasColumnName(@"Day0805").HasColumnType("int").IsRequired();
            Property(x => x.Day0901).HasColumnName(@"Day0901").HasColumnType("int").IsRequired();
            Property(x => x.Day0902).HasColumnName(@"Day0902").HasColumnType("int").IsRequired();
            Property(x => x.Day0903).HasColumnName(@"Day0903").HasColumnType("int").IsRequired();
            Property(x => x.Day0904).HasColumnName(@"Day0904").HasColumnType("int").IsRequired();
            Property(x => x.Day0905).HasColumnName(@"Day0905").HasColumnType("int").IsRequired();
            Property(x => x.Day1001).HasColumnName(@"Day1001").HasColumnType("int").IsRequired();
            Property(x => x.Day1002).HasColumnName(@"Day1002").HasColumnType("int").IsRequired();
            Property(x => x.Day1003).HasColumnName(@"Day1003").HasColumnType("int").IsRequired();
            Property(x => x.Day1004).HasColumnName(@"Day1004").HasColumnType("int").IsRequired();
            Property(x => x.Day1005).HasColumnName(@"Day1005").HasColumnType("int").IsRequired();
            Property(x => x.Day1101).HasColumnName(@"Day1101").HasColumnType("int").IsRequired();
            Property(x => x.Day1102).HasColumnName(@"Day1102").HasColumnType("int").IsRequired();
            Property(x => x.Day1103).HasColumnName(@"Day1103").HasColumnType("int").IsRequired();
            Property(x => x.Day1104).HasColumnName(@"Day1104").HasColumnType("int").IsRequired();
            Property(x => x.Day1105).HasColumnName(@"Day1105").HasColumnType("int").IsRequired();
            Property(x => x.Day1201).HasColumnName(@"Day1201").HasColumnType("int").IsRequired();
            Property(x => x.Day1202).HasColumnName(@"Day1202").HasColumnType("int").IsRequired();
            Property(x => x.Day1203).HasColumnName(@"Day1203").HasColumnType("int").IsRequired();
            Property(x => x.Day1204).HasColumnName(@"Day1204").HasColumnType("int").IsRequired();
            Property(x => x.Day1205).HasColumnName(@"Day1205").HasColumnType("int").IsRequired();
            Property(x => x.Day1301).HasColumnName(@"Day1301").HasColumnType("int").IsRequired();
            Property(x => x.Day1302).HasColumnName(@"Day1302").HasColumnType("int").IsRequired();
            Property(x => x.Day1303).HasColumnName(@"Day1303").HasColumnType("int").IsRequired();
            Property(x => x.Day1304).HasColumnName(@"Day1304").HasColumnType("int").IsRequired();
            Property(x => x.Day1305).HasColumnName(@"Day1305").HasColumnType("int").IsRequired();
            Property(x => x.Day1401).HasColumnName(@"Day1401").HasColumnType("int").IsRequired();
            Property(x => x.Day1402).HasColumnName(@"Day1402").HasColumnType("int").IsRequired();
            Property(x => x.Day1403).HasColumnName(@"Day1403").HasColumnType("int").IsRequired();
            Property(x => x.Day1404).HasColumnName(@"Day1404").HasColumnType("int").IsRequired();
            Property(x => x.Day1405).HasColumnName(@"Day1405").HasColumnType("int").IsRequired();
            Property(x => x.Day1501).HasColumnName(@"Day1501").HasColumnType("int").IsRequired();
            Property(x => x.Day1502).HasColumnName(@"Day1502").HasColumnType("int").IsRequired();
            Property(x => x.Day1503).HasColumnName(@"Day1503").HasColumnType("int").IsRequired();
            Property(x => x.Day1504).HasColumnName(@"Day1504").HasColumnType("int").IsRequired();
            Property(x => x.Day1505).HasColumnName(@"Day1505").HasColumnType("int").IsRequired();
            Property(x => x.Day1601).HasColumnName(@"Day1601").HasColumnType("int").IsRequired();
            Property(x => x.Day1602).HasColumnName(@"Day1602").HasColumnType("int").IsRequired();
            Property(x => x.Day1603).HasColumnName(@"Day1603").HasColumnType("int").IsRequired();
            Property(x => x.Day1604).HasColumnName(@"Day1604").HasColumnType("int").IsRequired();
            Property(x => x.Day1605).HasColumnName(@"Day1605").HasColumnType("int").IsRequired();
            Property(x => x.Day1701).HasColumnName(@"Day1701").HasColumnType("int").IsRequired();
            Property(x => x.Day1702).HasColumnName(@"Day1702").HasColumnType("int").IsRequired();
            Property(x => x.Day1703).HasColumnName(@"Day1703").HasColumnType("int").IsRequired();
            Property(x => x.Day1704).HasColumnName(@"Day1704").HasColumnType("int").IsRequired();
            Property(x => x.Day1705).HasColumnName(@"Day1705").HasColumnType("int").IsRequired();
            Property(x => x.Day1801).HasColumnName(@"Day1801").HasColumnType("int").IsRequired();
            Property(x => x.Day1802).HasColumnName(@"Day1802").HasColumnType("int").IsRequired();
            Property(x => x.Day1803).HasColumnName(@"Day1803").HasColumnType("int").IsRequired();
            Property(x => x.Day1804).HasColumnName(@"Day1804").HasColumnType("int").IsRequired();
            Property(x => x.Day1805).HasColumnName(@"Day1805").HasColumnType("int").IsRequired();
            Property(x => x.Day1901).HasColumnName(@"Day1901").HasColumnType("int").IsRequired();
            Property(x => x.Day1902).HasColumnName(@"Day1902").HasColumnType("int").IsRequired();
            Property(x => x.Day1903).HasColumnName(@"Day1903").HasColumnType("int").IsRequired();
            Property(x => x.Day1904).HasColumnName(@"Day1904").HasColumnType("int").IsRequired();
            Property(x => x.Day1905).HasColumnName(@"Day1905").HasColumnType("int").IsRequired();
            Property(x => x.Day2001).HasColumnName(@"Day2001").HasColumnType("int").IsRequired();
            Property(x => x.Day2002).HasColumnName(@"Day2002").HasColumnType("int").IsRequired();
            Property(x => x.Day2003).HasColumnName(@"Day2003").HasColumnType("int").IsRequired();
            Property(x => x.Day2004).HasColumnName(@"Day2004").HasColumnType("int").IsRequired();
            Property(x => x.Day2005).HasColumnName(@"Day2005").HasColumnType("int").IsRequired();
            Property(x => x.Day2101).HasColumnName(@"Day2101").HasColumnType("int").IsRequired();
            Property(x => x.Day2102).HasColumnName(@"Day2102").HasColumnType("int").IsRequired();
            Property(x => x.Day2103).HasColumnName(@"Day2103").HasColumnType("int").IsRequired();
            Property(x => x.Day2104).HasColumnName(@"Day2104").HasColumnType("int").IsRequired();
            Property(x => x.Day2105).HasColumnName(@"Day2105").HasColumnType("int").IsRequired();
            Property(x => x.Day2201).HasColumnName(@"Day2201").HasColumnType("int").IsRequired();
            Property(x => x.Day2202).HasColumnName(@"Day2202").HasColumnType("int").IsRequired();
            Property(x => x.Day2203).HasColumnName(@"Day2203").HasColumnType("int").IsRequired();
            Property(x => x.Day2204).HasColumnName(@"Day2204").HasColumnType("int").IsRequired();
            Property(x => x.Day2205).HasColumnName(@"Day2205").HasColumnType("int").IsRequired();
            Property(x => x.Day2301).HasColumnName(@"Day2301").HasColumnType("int").IsRequired();
            Property(x => x.Day2302).HasColumnName(@"Day2302").HasColumnType("int").IsRequired();
            Property(x => x.Day2303).HasColumnName(@"Day2303").HasColumnType("int").IsRequired();
            Property(x => x.Day2304).HasColumnName(@"Day2304").HasColumnType("int").IsRequired();
            Property(x => x.Day2305).HasColumnName(@"Day2305").HasColumnType("int").IsRequired();
            Property(x => x.Day2401).HasColumnName(@"Day2401").HasColumnType("int").IsRequired();
            Property(x => x.Day2402).HasColumnName(@"Day2402").HasColumnType("int").IsRequired();
            Property(x => x.Day2403).HasColumnName(@"Day2403").HasColumnType("int").IsRequired();
            Property(x => x.Day2404).HasColumnName(@"Day2404").HasColumnType("int").IsRequired();
            Property(x => x.Day2405).HasColumnName(@"Day2405").HasColumnType("int").IsRequired();
            Property(x => x.Day2501).HasColumnName(@"Day2501").HasColumnType("int").IsRequired();
            Property(x => x.Day2502).HasColumnName(@"Day2502").HasColumnType("int").IsRequired();
            Property(x => x.Day2503).HasColumnName(@"Day2503").HasColumnType("int").IsRequired();
            Property(x => x.Day2504).HasColumnName(@"Day2504").HasColumnType("int").IsRequired();
            Property(x => x.Day2505).HasColumnName(@"Day2505").HasColumnType("int").IsRequired();
            Property(x => x.Day2601).HasColumnName(@"Day2601").HasColumnType("int").IsRequired();
            Property(x => x.Day2602).HasColumnName(@"Day2602").HasColumnType("int").IsRequired();
            Property(x => x.Day2603).HasColumnName(@"Day2603").HasColumnType("int").IsRequired();
            Property(x => x.Day2604).HasColumnName(@"Day2604").HasColumnType("int").IsRequired();
            Property(x => x.Day2605).HasColumnName(@"Day2605").HasColumnType("int").IsRequired();
            Property(x => x.Day2701).HasColumnName(@"Day2701").HasColumnType("int").IsRequired();
            Property(x => x.Day2702).HasColumnName(@"Day2702").HasColumnType("int").IsRequired();
            Property(x => x.Day2703).HasColumnName(@"Day2703").HasColumnType("int").IsRequired();
            Property(x => x.Day2704).HasColumnName(@"Day2704").HasColumnType("int").IsRequired();
            Property(x => x.Day2705).HasColumnName(@"Day2705").HasColumnType("int").IsRequired();
            Property(x => x.Day2801).HasColumnName(@"Day2801").HasColumnType("int").IsRequired();
            Property(x => x.Day2802).HasColumnName(@"Day2802").HasColumnType("int").IsRequired();
            Property(x => x.Day2803).HasColumnName(@"Day2803").HasColumnType("int").IsRequired();
            Property(x => x.Day2804).HasColumnName(@"Day2804").HasColumnType("int").IsRequired();
            Property(x => x.Day2805).HasColumnName(@"Day2805").HasColumnType("int").IsRequired();
            Property(x => x.Day2901).HasColumnName(@"Day2901").HasColumnType("int").IsRequired();
            Property(x => x.Day2902).HasColumnName(@"Day2902").HasColumnType("int").IsRequired();
            Property(x => x.Day2903).HasColumnName(@"Day2903").HasColumnType("int").IsRequired();
            Property(x => x.Day2904).HasColumnName(@"Day2904").HasColumnType("int").IsRequired();
            Property(x => x.Day2905).HasColumnName(@"Day2905").HasColumnType("int").IsRequired();
            Property(x => x.Day3001).HasColumnName(@"Day3001").HasColumnType("int").IsRequired();
            Property(x => x.Day3002).HasColumnName(@"Day3002").HasColumnType("int").IsRequired();
            Property(x => x.Day3003).HasColumnName(@"Day3003").HasColumnType("int").IsRequired();
            Property(x => x.Day3004).HasColumnName(@"Day3004").HasColumnType("int").IsRequired();
            Property(x => x.Day3005).HasColumnName(@"Day3005").HasColumnType("int").IsRequired();
            Property(x => x.Day3101).HasColumnName(@"Day3101").HasColumnType("int").IsRequired();
            Property(x => x.Day3102).HasColumnName(@"Day3102").HasColumnType("int").IsRequired();
            Property(x => x.Day3103).HasColumnName(@"Day3103").HasColumnType("int").IsRequired();
            Property(x => x.Day3104).HasColumnName(@"Day3104").HasColumnType("int").IsRequired();
            Property(x => x.Day3105).HasColumnName(@"Day3105").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Staff).WithMany(b => b.StaffWorks).HasForeignKey(c => c.StaffID).WillCascadeOnDelete(false); // FK_StaffWork_Staff
        }
    }

    // Station
    public class StationConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Station>
    {
        public StationConfiguration()
            : this("dbo")
        {
        }

        public StationConfiguration(string schema)
        {
            ToTable("Station", schema);
            HasKey(x => x.StationID);

            Property(x => x.StationID).HasColumnName(@"StationID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StationEleID).HasColumnName(@"StationEleID").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Group).WithOptional(b => b.Station).WillCascadeOnDelete(false); // FK_Station_Group
        }
    }

    // User
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserID);

            Property(x => x.GroupID).HasColumnName(@"GroupID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.RoleID).HasColumnName(@"RoleID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.UserID).HasColumnName(@"UserID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("nvarchar").IsRequired().HasMaxLength(20);
            Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.RealName).HasColumnName(@"RealName").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.RealNameIsValid).HasColumnName(@"RealNameIsValid").HasColumnType("bit").IsRequired();
            Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.EmailIsValid).HasColumnName(@"EmailIsValid").HasColumnType("bit").IsRequired();
            Property(x => x.Mobile).HasColumnName(@"Mobile").HasColumnType("nvarchar").IsOptional().HasMaxLength(20);
            Property(x => x.MobileIsValid).HasColumnName(@"MobileIsValid").HasColumnType("bit").IsRequired();
            Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar").IsRequired().HasMaxLength(100);
            Property(x => x.Status).HasColumnName(@"Status").HasColumnType("int").IsRequired();
            Property(x => x.CreationDate).HasColumnName(@"CreationDate").HasColumnType("datetime2").IsRequired();
            Property(x => x.HeadURL).HasColumnName(@"HeadURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.LogoURL).HasColumnName(@"LogoURL").HasColumnType("nvarchar").IsOptional().HasMaxLength(200);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar").IsOptional().HasMaxLength(4000);
            Property(x => x.ClientAgent).HasColumnName(@"ClientAgent").HasColumnType("nvarchar").IsOptional().HasMaxLength(100);
            Property(x => x.Token).HasColumnName(@"Token").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.WXOpenID).HasColumnName(@"WXOpenID").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.WXAOpenID).HasColumnName(@"WXAOpenID").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
            Property(x => x.RowVersion).HasColumnName(@"RowVersion").HasColumnType("timestamp").IsRequired().IsFixedLength().HasMaxLength(8).IsRowVersion().IsConcurrencyToken().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Computed);

            // Foreign keys
            HasOptional(a => a.Role).WithMany(b => b.Users_RoleID).HasForeignKey(c => c.RoleID).WillCascadeOnDelete(false); // FK_User_Role
            HasRequired(a => a.Group).WithMany(b => b.Users).HasForeignKey(c => c.GroupID); // FK_User_Group
        }
    }

    #endregion

    #region Stored procedure return models

    #endregion

}
// </auto-generated>

